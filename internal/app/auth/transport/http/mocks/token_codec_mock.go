// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/66gu1/easygodocs/internal/app/auth/transport/http.TokenCodec -o token_codec_mock.go -n TokenCodecMock -p mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/golang-jwt/jwt/v5"
)

// TokenCodecMock implements mm_http.TokenCodec
type TokenCodecMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcParseToken          func(tokenStr string, claims jwt.Claims) (err error)
	funcParseTokenOrigin    string
	inspectFuncParseToken   func(tokenStr string, claims jwt.Claims)
	afterParseTokenCounter  uint64
	beforeParseTokenCounter uint64
	ParseTokenMock          mTokenCodecMockParseToken
}

// NewTokenCodecMock returns a mock for mm_http.TokenCodec
func NewTokenCodecMock(t minimock.Tester) *TokenCodecMock {
	m := &TokenCodecMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ParseTokenMock = mTokenCodecMockParseToken{mock: m}
	m.ParseTokenMock.callArgs = []*TokenCodecMockParseTokenParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mTokenCodecMockParseToken struct {
	optional           bool
	mock               *TokenCodecMock
	defaultExpectation *TokenCodecMockParseTokenExpectation
	expectations       []*TokenCodecMockParseTokenExpectation

	callArgs []*TokenCodecMockParseTokenParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// TokenCodecMockParseTokenExpectation specifies expectation struct of the TokenCodec.ParseToken
type TokenCodecMockParseTokenExpectation struct {
	mock               *TokenCodecMock
	params             *TokenCodecMockParseTokenParams
	paramPtrs          *TokenCodecMockParseTokenParamPtrs
	expectationOrigins TokenCodecMockParseTokenExpectationOrigins
	results            *TokenCodecMockParseTokenResults
	returnOrigin       string
	Counter            uint64
}

// TokenCodecMockParseTokenParams contains parameters of the TokenCodec.ParseToken
type TokenCodecMockParseTokenParams struct {
	tokenStr string
	claims   jwt.Claims
}

// TokenCodecMockParseTokenParamPtrs contains pointers to parameters of the TokenCodec.ParseToken
type TokenCodecMockParseTokenParamPtrs struct {
	tokenStr *string
	claims   *jwt.Claims
}

// TokenCodecMockParseTokenResults contains results of the TokenCodec.ParseToken
type TokenCodecMockParseTokenResults struct {
	err error
}

// TokenCodecMockParseTokenOrigins contains origins of expectations of the TokenCodec.ParseToken
type TokenCodecMockParseTokenExpectationOrigins struct {
	origin         string
	originTokenStr string
	originClaims   string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmParseToken *mTokenCodecMockParseToken) Optional() *mTokenCodecMockParseToken {
	mmParseToken.optional = true
	return mmParseToken
}

// Expect sets up expected params for TokenCodec.ParseToken
func (mmParseToken *mTokenCodecMockParseToken) Expect(tokenStr string, claims jwt.Claims) *mTokenCodecMockParseToken {
	if mmParseToken.mock.funcParseToken != nil {
		mmParseToken.mock.t.Fatalf("TokenCodecMock.ParseToken mock is already set by Set")
	}

	if mmParseToken.defaultExpectation == nil {
		mmParseToken.defaultExpectation = &TokenCodecMockParseTokenExpectation{}
	}

	if mmParseToken.defaultExpectation.paramPtrs != nil {
		mmParseToken.mock.t.Fatalf("TokenCodecMock.ParseToken mock is already set by ExpectParams functions")
	}

	mmParseToken.defaultExpectation.params = &TokenCodecMockParseTokenParams{tokenStr, claims}
	mmParseToken.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmParseToken.expectations {
		if minimock.Equal(e.params, mmParseToken.defaultExpectation.params) {
			mmParseToken.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmParseToken.defaultExpectation.params)
		}
	}

	return mmParseToken
}

// ExpectTokenStrParam1 sets up expected param tokenStr for TokenCodec.ParseToken
func (mmParseToken *mTokenCodecMockParseToken) ExpectTokenStrParam1(tokenStr string) *mTokenCodecMockParseToken {
	if mmParseToken.mock.funcParseToken != nil {
		mmParseToken.mock.t.Fatalf("TokenCodecMock.ParseToken mock is already set by Set")
	}

	if mmParseToken.defaultExpectation == nil {
		mmParseToken.defaultExpectation = &TokenCodecMockParseTokenExpectation{}
	}

	if mmParseToken.defaultExpectation.params != nil {
		mmParseToken.mock.t.Fatalf("TokenCodecMock.ParseToken mock is already set by Expect")
	}

	if mmParseToken.defaultExpectation.paramPtrs == nil {
		mmParseToken.defaultExpectation.paramPtrs = &TokenCodecMockParseTokenParamPtrs{}
	}
	mmParseToken.defaultExpectation.paramPtrs.tokenStr = &tokenStr
	mmParseToken.defaultExpectation.expectationOrigins.originTokenStr = minimock.CallerInfo(1)

	return mmParseToken
}

// ExpectClaimsParam2 sets up expected param claims for TokenCodec.ParseToken
func (mmParseToken *mTokenCodecMockParseToken) ExpectClaimsParam2(claims jwt.Claims) *mTokenCodecMockParseToken {
	if mmParseToken.mock.funcParseToken != nil {
		mmParseToken.mock.t.Fatalf("TokenCodecMock.ParseToken mock is already set by Set")
	}

	if mmParseToken.defaultExpectation == nil {
		mmParseToken.defaultExpectation = &TokenCodecMockParseTokenExpectation{}
	}

	if mmParseToken.defaultExpectation.params != nil {
		mmParseToken.mock.t.Fatalf("TokenCodecMock.ParseToken mock is already set by Expect")
	}

	if mmParseToken.defaultExpectation.paramPtrs == nil {
		mmParseToken.defaultExpectation.paramPtrs = &TokenCodecMockParseTokenParamPtrs{}
	}
	mmParseToken.defaultExpectation.paramPtrs.claims = &claims
	mmParseToken.defaultExpectation.expectationOrigins.originClaims = minimock.CallerInfo(1)

	return mmParseToken
}

// Inspect accepts an inspector function that has same arguments as the TokenCodec.ParseToken
func (mmParseToken *mTokenCodecMockParseToken) Inspect(f func(tokenStr string, claims jwt.Claims)) *mTokenCodecMockParseToken {
	if mmParseToken.mock.inspectFuncParseToken != nil {
		mmParseToken.mock.t.Fatalf("Inspect function is already set for TokenCodecMock.ParseToken")
	}

	mmParseToken.mock.inspectFuncParseToken = f

	return mmParseToken
}

// Return sets up results that will be returned by TokenCodec.ParseToken
func (mmParseToken *mTokenCodecMockParseToken) Return(err error) *TokenCodecMock {
	if mmParseToken.mock.funcParseToken != nil {
		mmParseToken.mock.t.Fatalf("TokenCodecMock.ParseToken mock is already set by Set")
	}

	if mmParseToken.defaultExpectation == nil {
		mmParseToken.defaultExpectation = &TokenCodecMockParseTokenExpectation{mock: mmParseToken.mock}
	}
	mmParseToken.defaultExpectation.results = &TokenCodecMockParseTokenResults{err}
	mmParseToken.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmParseToken.mock
}

// Set uses given function f to mock the TokenCodec.ParseToken method
func (mmParseToken *mTokenCodecMockParseToken) Set(f func(tokenStr string, claims jwt.Claims) (err error)) *TokenCodecMock {
	if mmParseToken.defaultExpectation != nil {
		mmParseToken.mock.t.Fatalf("Default expectation is already set for the TokenCodec.ParseToken method")
	}

	if len(mmParseToken.expectations) > 0 {
		mmParseToken.mock.t.Fatalf("Some expectations are already set for the TokenCodec.ParseToken method")
	}

	mmParseToken.mock.funcParseToken = f
	mmParseToken.mock.funcParseTokenOrigin = minimock.CallerInfo(1)
	return mmParseToken.mock
}

// When sets expectation for the TokenCodec.ParseToken which will trigger the result defined by the following
// Then helper
func (mmParseToken *mTokenCodecMockParseToken) When(tokenStr string, claims jwt.Claims) *TokenCodecMockParseTokenExpectation {
	if mmParseToken.mock.funcParseToken != nil {
		mmParseToken.mock.t.Fatalf("TokenCodecMock.ParseToken mock is already set by Set")
	}

	expectation := &TokenCodecMockParseTokenExpectation{
		mock:               mmParseToken.mock,
		params:             &TokenCodecMockParseTokenParams{tokenStr, claims},
		expectationOrigins: TokenCodecMockParseTokenExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmParseToken.expectations = append(mmParseToken.expectations, expectation)
	return expectation
}

// Then sets up TokenCodec.ParseToken return parameters for the expectation previously defined by the When method
func (e *TokenCodecMockParseTokenExpectation) Then(err error) *TokenCodecMock {
	e.results = &TokenCodecMockParseTokenResults{err}
	return e.mock
}

// Times sets number of times TokenCodec.ParseToken should be invoked
func (mmParseToken *mTokenCodecMockParseToken) Times(n uint64) *mTokenCodecMockParseToken {
	if n == 0 {
		mmParseToken.mock.t.Fatalf("Times of TokenCodecMock.ParseToken mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmParseToken.expectedInvocations, n)
	mmParseToken.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmParseToken
}

func (mmParseToken *mTokenCodecMockParseToken) invocationsDone() bool {
	if len(mmParseToken.expectations) == 0 && mmParseToken.defaultExpectation == nil && mmParseToken.mock.funcParseToken == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmParseToken.mock.afterParseTokenCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmParseToken.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ParseToken implements mm_http.TokenCodec
func (mmParseToken *TokenCodecMock) ParseToken(tokenStr string, claims jwt.Claims) (err error) {
	mm_atomic.AddUint64(&mmParseToken.beforeParseTokenCounter, 1)
	defer mm_atomic.AddUint64(&mmParseToken.afterParseTokenCounter, 1)

	mmParseToken.t.Helper()

	if mmParseToken.inspectFuncParseToken != nil {
		mmParseToken.inspectFuncParseToken(tokenStr, claims)
	}

	mm_params := TokenCodecMockParseTokenParams{tokenStr, claims}

	// Record call args
	mmParseToken.ParseTokenMock.mutex.Lock()
	mmParseToken.ParseTokenMock.callArgs = append(mmParseToken.ParseTokenMock.callArgs, &mm_params)
	mmParseToken.ParseTokenMock.mutex.Unlock()

	for _, e := range mmParseToken.ParseTokenMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmParseToken.ParseTokenMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmParseToken.ParseTokenMock.defaultExpectation.Counter, 1)
		mm_want := mmParseToken.ParseTokenMock.defaultExpectation.params
		mm_want_ptrs := mmParseToken.ParseTokenMock.defaultExpectation.paramPtrs

		mm_got := TokenCodecMockParseTokenParams{tokenStr, claims}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.tokenStr != nil && !minimock.Equal(*mm_want_ptrs.tokenStr, mm_got.tokenStr) {
				mmParseToken.t.Errorf("TokenCodecMock.ParseToken got unexpected parameter tokenStr, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmParseToken.ParseTokenMock.defaultExpectation.expectationOrigins.originTokenStr, *mm_want_ptrs.tokenStr, mm_got.tokenStr, minimock.Diff(*mm_want_ptrs.tokenStr, mm_got.tokenStr))
			}

			if mm_want_ptrs.claims != nil && !minimock.Equal(*mm_want_ptrs.claims, mm_got.claims) {
				mmParseToken.t.Errorf("TokenCodecMock.ParseToken got unexpected parameter claims, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmParseToken.ParseTokenMock.defaultExpectation.expectationOrigins.originClaims, *mm_want_ptrs.claims, mm_got.claims, minimock.Diff(*mm_want_ptrs.claims, mm_got.claims))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmParseToken.t.Errorf("TokenCodecMock.ParseToken got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmParseToken.ParseTokenMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmParseToken.ParseTokenMock.defaultExpectation.results
		if mm_results == nil {
			mmParseToken.t.Fatal("No results are set for the TokenCodecMock.ParseToken")
		}
		return (*mm_results).err
	}
	if mmParseToken.funcParseToken != nil {
		return mmParseToken.funcParseToken(tokenStr, claims)
	}
	mmParseToken.t.Fatalf("Unexpected call to TokenCodecMock.ParseToken. %v %v", tokenStr, claims)
	return
}

// ParseTokenAfterCounter returns a count of finished TokenCodecMock.ParseToken invocations
func (mmParseToken *TokenCodecMock) ParseTokenAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmParseToken.afterParseTokenCounter)
}

// ParseTokenBeforeCounter returns a count of TokenCodecMock.ParseToken invocations
func (mmParseToken *TokenCodecMock) ParseTokenBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmParseToken.beforeParseTokenCounter)
}

// Calls returns a list of arguments used in each call to TokenCodecMock.ParseToken.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmParseToken *mTokenCodecMockParseToken) Calls() []*TokenCodecMockParseTokenParams {
	mmParseToken.mutex.RLock()

	argCopy := make([]*TokenCodecMockParseTokenParams, len(mmParseToken.callArgs))
	copy(argCopy, mmParseToken.callArgs)

	mmParseToken.mutex.RUnlock()

	return argCopy
}

// MinimockParseTokenDone returns true if the count of the ParseToken invocations corresponds
// the number of defined expectations
func (m *TokenCodecMock) MinimockParseTokenDone() bool {
	if m.ParseTokenMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ParseTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ParseTokenMock.invocationsDone()
}

// MinimockParseTokenInspect logs each unmet expectation
func (m *TokenCodecMock) MinimockParseTokenInspect() {
	for _, e := range m.ParseTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TokenCodecMock.ParseToken at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterParseTokenCounter := mm_atomic.LoadUint64(&m.afterParseTokenCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ParseTokenMock.defaultExpectation != nil && afterParseTokenCounter < 1 {
		if m.ParseTokenMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to TokenCodecMock.ParseToken at\n%s", m.ParseTokenMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to TokenCodecMock.ParseToken at\n%s with params: %#v", m.ParseTokenMock.defaultExpectation.expectationOrigins.origin, *m.ParseTokenMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcParseToken != nil && afterParseTokenCounter < 1 {
		m.t.Errorf("Expected call to TokenCodecMock.ParseToken at\n%s", m.funcParseTokenOrigin)
	}

	if !m.ParseTokenMock.invocationsDone() && afterParseTokenCounter > 0 {
		m.t.Errorf("Expected %d calls to TokenCodecMock.ParseToken at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ParseTokenMock.expectedInvocations), m.ParseTokenMock.expectedInvocationsOrigin, afterParseTokenCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TokenCodecMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockParseTokenInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TokenCodecMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TokenCodecMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockParseTokenDone()
}

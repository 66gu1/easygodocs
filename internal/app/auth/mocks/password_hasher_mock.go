// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/66gu1/easygodocs/internal/app/auth.PasswordHasher -o password_hasher_mock.go -n PasswordHasherMock -p mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// PasswordHasherMock implements mm_auth.PasswordHasher
type PasswordHasherMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCheckPasswordHash          func(password []byte, hash string) (err error)
	funcCheckPasswordHashOrigin    string
	inspectFuncCheckPasswordHash   func(password []byte, hash string)
	afterCheckPasswordHashCounter  uint64
	beforeCheckPasswordHashCounter uint64
	CheckPasswordHashMock          mPasswordHasherMockCheckPasswordHash

	funcHashRefreshToken          func(token []byte) (ba1 []byte, err error)
	funcHashRefreshTokenOrigin    string
	inspectFuncHashRefreshToken   func(token []byte)
	afterHashRefreshTokenCounter  uint64
	beforeHashRefreshTokenCounter uint64
	HashRefreshTokenMock          mPasswordHasherMockHashRefreshToken
}

// NewPasswordHasherMock returns a mock for mm_auth.PasswordHasher
func NewPasswordHasherMock(t minimock.Tester) *PasswordHasherMock {
	m := &PasswordHasherMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CheckPasswordHashMock = mPasswordHasherMockCheckPasswordHash{mock: m}
	m.CheckPasswordHashMock.callArgs = []*PasswordHasherMockCheckPasswordHashParams{}

	m.HashRefreshTokenMock = mPasswordHasherMockHashRefreshToken{mock: m}
	m.HashRefreshTokenMock.callArgs = []*PasswordHasherMockHashRefreshTokenParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mPasswordHasherMockCheckPasswordHash struct {
	optional           bool
	mock               *PasswordHasherMock
	defaultExpectation *PasswordHasherMockCheckPasswordHashExpectation
	expectations       []*PasswordHasherMockCheckPasswordHashExpectation

	callArgs []*PasswordHasherMockCheckPasswordHashParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// PasswordHasherMockCheckPasswordHashExpectation specifies expectation struct of the PasswordHasher.CheckPasswordHash
type PasswordHasherMockCheckPasswordHashExpectation struct {
	mock               *PasswordHasherMock
	params             *PasswordHasherMockCheckPasswordHashParams
	paramPtrs          *PasswordHasherMockCheckPasswordHashParamPtrs
	expectationOrigins PasswordHasherMockCheckPasswordHashExpectationOrigins
	results            *PasswordHasherMockCheckPasswordHashResults
	returnOrigin       string
	Counter            uint64
}

// PasswordHasherMockCheckPasswordHashParams contains parameters of the PasswordHasher.CheckPasswordHash
type PasswordHasherMockCheckPasswordHashParams struct {
	password []byte
	hash     string
}

// PasswordHasherMockCheckPasswordHashParamPtrs contains pointers to parameters of the PasswordHasher.CheckPasswordHash
type PasswordHasherMockCheckPasswordHashParamPtrs struct {
	password *[]byte
	hash     *string
}

// PasswordHasherMockCheckPasswordHashResults contains results of the PasswordHasher.CheckPasswordHash
type PasswordHasherMockCheckPasswordHashResults struct {
	err error
}

// PasswordHasherMockCheckPasswordHashOrigins contains origins of expectations of the PasswordHasher.CheckPasswordHash
type PasswordHasherMockCheckPasswordHashExpectationOrigins struct {
	origin         string
	originPassword string
	originHash     string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCheckPasswordHash *mPasswordHasherMockCheckPasswordHash) Optional() *mPasswordHasherMockCheckPasswordHash {
	mmCheckPasswordHash.optional = true
	return mmCheckPasswordHash
}

// Expect sets up expected params for PasswordHasher.CheckPasswordHash
func (mmCheckPasswordHash *mPasswordHasherMockCheckPasswordHash) Expect(password []byte, hash string) *mPasswordHasherMockCheckPasswordHash {
	if mmCheckPasswordHash.mock.funcCheckPasswordHash != nil {
		mmCheckPasswordHash.mock.t.Fatalf("PasswordHasherMock.CheckPasswordHash mock is already set by Set")
	}

	if mmCheckPasswordHash.defaultExpectation == nil {
		mmCheckPasswordHash.defaultExpectation = &PasswordHasherMockCheckPasswordHashExpectation{}
	}

	if mmCheckPasswordHash.defaultExpectation.paramPtrs != nil {
		mmCheckPasswordHash.mock.t.Fatalf("PasswordHasherMock.CheckPasswordHash mock is already set by ExpectParams functions")
	}

	mmCheckPasswordHash.defaultExpectation.params = &PasswordHasherMockCheckPasswordHashParams{password, hash}
	mmCheckPasswordHash.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCheckPasswordHash.expectations {
		if minimock.Equal(e.params, mmCheckPasswordHash.defaultExpectation.params) {
			mmCheckPasswordHash.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCheckPasswordHash.defaultExpectation.params)
		}
	}

	return mmCheckPasswordHash
}

// ExpectPasswordParam1 sets up expected param password for PasswordHasher.CheckPasswordHash
func (mmCheckPasswordHash *mPasswordHasherMockCheckPasswordHash) ExpectPasswordParam1(password []byte) *mPasswordHasherMockCheckPasswordHash {
	if mmCheckPasswordHash.mock.funcCheckPasswordHash != nil {
		mmCheckPasswordHash.mock.t.Fatalf("PasswordHasherMock.CheckPasswordHash mock is already set by Set")
	}

	if mmCheckPasswordHash.defaultExpectation == nil {
		mmCheckPasswordHash.defaultExpectation = &PasswordHasherMockCheckPasswordHashExpectation{}
	}

	if mmCheckPasswordHash.defaultExpectation.params != nil {
		mmCheckPasswordHash.mock.t.Fatalf("PasswordHasherMock.CheckPasswordHash mock is already set by Expect")
	}

	if mmCheckPasswordHash.defaultExpectation.paramPtrs == nil {
		mmCheckPasswordHash.defaultExpectation.paramPtrs = &PasswordHasherMockCheckPasswordHashParamPtrs{}
	}
	mmCheckPasswordHash.defaultExpectation.paramPtrs.password = &password
	mmCheckPasswordHash.defaultExpectation.expectationOrigins.originPassword = minimock.CallerInfo(1)

	return mmCheckPasswordHash
}

// ExpectHashParam2 sets up expected param hash for PasswordHasher.CheckPasswordHash
func (mmCheckPasswordHash *mPasswordHasherMockCheckPasswordHash) ExpectHashParam2(hash string) *mPasswordHasherMockCheckPasswordHash {
	if mmCheckPasswordHash.mock.funcCheckPasswordHash != nil {
		mmCheckPasswordHash.mock.t.Fatalf("PasswordHasherMock.CheckPasswordHash mock is already set by Set")
	}

	if mmCheckPasswordHash.defaultExpectation == nil {
		mmCheckPasswordHash.defaultExpectation = &PasswordHasherMockCheckPasswordHashExpectation{}
	}

	if mmCheckPasswordHash.defaultExpectation.params != nil {
		mmCheckPasswordHash.mock.t.Fatalf("PasswordHasherMock.CheckPasswordHash mock is already set by Expect")
	}

	if mmCheckPasswordHash.defaultExpectation.paramPtrs == nil {
		mmCheckPasswordHash.defaultExpectation.paramPtrs = &PasswordHasherMockCheckPasswordHashParamPtrs{}
	}
	mmCheckPasswordHash.defaultExpectation.paramPtrs.hash = &hash
	mmCheckPasswordHash.defaultExpectation.expectationOrigins.originHash = minimock.CallerInfo(1)

	return mmCheckPasswordHash
}

// Inspect accepts an inspector function that has same arguments as the PasswordHasher.CheckPasswordHash
func (mmCheckPasswordHash *mPasswordHasherMockCheckPasswordHash) Inspect(f func(password []byte, hash string)) *mPasswordHasherMockCheckPasswordHash {
	if mmCheckPasswordHash.mock.inspectFuncCheckPasswordHash != nil {
		mmCheckPasswordHash.mock.t.Fatalf("Inspect function is already set for PasswordHasherMock.CheckPasswordHash")
	}

	mmCheckPasswordHash.mock.inspectFuncCheckPasswordHash = f

	return mmCheckPasswordHash
}

// Return sets up results that will be returned by PasswordHasher.CheckPasswordHash
func (mmCheckPasswordHash *mPasswordHasherMockCheckPasswordHash) Return(err error) *PasswordHasherMock {
	if mmCheckPasswordHash.mock.funcCheckPasswordHash != nil {
		mmCheckPasswordHash.mock.t.Fatalf("PasswordHasherMock.CheckPasswordHash mock is already set by Set")
	}

	if mmCheckPasswordHash.defaultExpectation == nil {
		mmCheckPasswordHash.defaultExpectation = &PasswordHasherMockCheckPasswordHashExpectation{mock: mmCheckPasswordHash.mock}
	}
	mmCheckPasswordHash.defaultExpectation.results = &PasswordHasherMockCheckPasswordHashResults{err}
	mmCheckPasswordHash.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCheckPasswordHash.mock
}

// Set uses given function f to mock the PasswordHasher.CheckPasswordHash method
func (mmCheckPasswordHash *mPasswordHasherMockCheckPasswordHash) Set(f func(password []byte, hash string) (err error)) *PasswordHasherMock {
	if mmCheckPasswordHash.defaultExpectation != nil {
		mmCheckPasswordHash.mock.t.Fatalf("Default expectation is already set for the PasswordHasher.CheckPasswordHash method")
	}

	if len(mmCheckPasswordHash.expectations) > 0 {
		mmCheckPasswordHash.mock.t.Fatalf("Some expectations are already set for the PasswordHasher.CheckPasswordHash method")
	}

	mmCheckPasswordHash.mock.funcCheckPasswordHash = f
	mmCheckPasswordHash.mock.funcCheckPasswordHashOrigin = minimock.CallerInfo(1)
	return mmCheckPasswordHash.mock
}

// When sets expectation for the PasswordHasher.CheckPasswordHash which will trigger the result defined by the following
// Then helper
func (mmCheckPasswordHash *mPasswordHasherMockCheckPasswordHash) When(password []byte, hash string) *PasswordHasherMockCheckPasswordHashExpectation {
	if mmCheckPasswordHash.mock.funcCheckPasswordHash != nil {
		mmCheckPasswordHash.mock.t.Fatalf("PasswordHasherMock.CheckPasswordHash mock is already set by Set")
	}

	expectation := &PasswordHasherMockCheckPasswordHashExpectation{
		mock:               mmCheckPasswordHash.mock,
		params:             &PasswordHasherMockCheckPasswordHashParams{password, hash},
		expectationOrigins: PasswordHasherMockCheckPasswordHashExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCheckPasswordHash.expectations = append(mmCheckPasswordHash.expectations, expectation)
	return expectation
}

// Then sets up PasswordHasher.CheckPasswordHash return parameters for the expectation previously defined by the When method
func (e *PasswordHasherMockCheckPasswordHashExpectation) Then(err error) *PasswordHasherMock {
	e.results = &PasswordHasherMockCheckPasswordHashResults{err}
	return e.mock
}

// Times sets number of times PasswordHasher.CheckPasswordHash should be invoked
func (mmCheckPasswordHash *mPasswordHasherMockCheckPasswordHash) Times(n uint64) *mPasswordHasherMockCheckPasswordHash {
	if n == 0 {
		mmCheckPasswordHash.mock.t.Fatalf("Times of PasswordHasherMock.CheckPasswordHash mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCheckPasswordHash.expectedInvocations, n)
	mmCheckPasswordHash.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCheckPasswordHash
}

func (mmCheckPasswordHash *mPasswordHasherMockCheckPasswordHash) invocationsDone() bool {
	if len(mmCheckPasswordHash.expectations) == 0 && mmCheckPasswordHash.defaultExpectation == nil && mmCheckPasswordHash.mock.funcCheckPasswordHash == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCheckPasswordHash.mock.afterCheckPasswordHashCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCheckPasswordHash.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CheckPasswordHash implements mm_auth.PasswordHasher
func (mmCheckPasswordHash *PasswordHasherMock) CheckPasswordHash(password []byte, hash string) (err error) {
	mm_atomic.AddUint64(&mmCheckPasswordHash.beforeCheckPasswordHashCounter, 1)
	defer mm_atomic.AddUint64(&mmCheckPasswordHash.afterCheckPasswordHashCounter, 1)

	mmCheckPasswordHash.t.Helper()

	if mmCheckPasswordHash.inspectFuncCheckPasswordHash != nil {
		mmCheckPasswordHash.inspectFuncCheckPasswordHash(password, hash)
	}

	mm_params := PasswordHasherMockCheckPasswordHashParams{password, hash}

	// Record call args
	mmCheckPasswordHash.CheckPasswordHashMock.mutex.Lock()
	mmCheckPasswordHash.CheckPasswordHashMock.callArgs = append(mmCheckPasswordHash.CheckPasswordHashMock.callArgs, &mm_params)
	mmCheckPasswordHash.CheckPasswordHashMock.mutex.Unlock()

	for _, e := range mmCheckPasswordHash.CheckPasswordHashMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCheckPasswordHash.CheckPasswordHashMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCheckPasswordHash.CheckPasswordHashMock.defaultExpectation.Counter, 1)
		mm_want := mmCheckPasswordHash.CheckPasswordHashMock.defaultExpectation.params
		mm_want_ptrs := mmCheckPasswordHash.CheckPasswordHashMock.defaultExpectation.paramPtrs

		mm_got := PasswordHasherMockCheckPasswordHashParams{password, hash}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.password != nil && !minimock.Equal(*mm_want_ptrs.password, mm_got.password) {
				mmCheckPasswordHash.t.Errorf("PasswordHasherMock.CheckPasswordHash got unexpected parameter password, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCheckPasswordHash.CheckPasswordHashMock.defaultExpectation.expectationOrigins.originPassword, *mm_want_ptrs.password, mm_got.password, minimock.Diff(*mm_want_ptrs.password, mm_got.password))
			}

			if mm_want_ptrs.hash != nil && !minimock.Equal(*mm_want_ptrs.hash, mm_got.hash) {
				mmCheckPasswordHash.t.Errorf("PasswordHasherMock.CheckPasswordHash got unexpected parameter hash, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCheckPasswordHash.CheckPasswordHashMock.defaultExpectation.expectationOrigins.originHash, *mm_want_ptrs.hash, mm_got.hash, minimock.Diff(*mm_want_ptrs.hash, mm_got.hash))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCheckPasswordHash.t.Errorf("PasswordHasherMock.CheckPasswordHash got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCheckPasswordHash.CheckPasswordHashMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCheckPasswordHash.CheckPasswordHashMock.defaultExpectation.results
		if mm_results == nil {
			mmCheckPasswordHash.t.Fatal("No results are set for the PasswordHasherMock.CheckPasswordHash")
		}
		return (*mm_results).err
	}
	if mmCheckPasswordHash.funcCheckPasswordHash != nil {
		return mmCheckPasswordHash.funcCheckPasswordHash(password, hash)
	}
	mmCheckPasswordHash.t.Fatalf("Unexpected call to PasswordHasherMock.CheckPasswordHash. %v %v", password, hash)
	return
}

// CheckPasswordHashAfterCounter returns a count of finished PasswordHasherMock.CheckPasswordHash invocations
func (mmCheckPasswordHash *PasswordHasherMock) CheckPasswordHashAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckPasswordHash.afterCheckPasswordHashCounter)
}

// CheckPasswordHashBeforeCounter returns a count of PasswordHasherMock.CheckPasswordHash invocations
func (mmCheckPasswordHash *PasswordHasherMock) CheckPasswordHashBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckPasswordHash.beforeCheckPasswordHashCounter)
}

// Calls returns a list of arguments used in each call to PasswordHasherMock.CheckPasswordHash.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCheckPasswordHash *mPasswordHasherMockCheckPasswordHash) Calls() []*PasswordHasherMockCheckPasswordHashParams {
	mmCheckPasswordHash.mutex.RLock()

	argCopy := make([]*PasswordHasherMockCheckPasswordHashParams, len(mmCheckPasswordHash.callArgs))
	copy(argCopy, mmCheckPasswordHash.callArgs)

	mmCheckPasswordHash.mutex.RUnlock()

	return argCopy
}

// MinimockCheckPasswordHashDone returns true if the count of the CheckPasswordHash invocations corresponds
// the number of defined expectations
func (m *PasswordHasherMock) MinimockCheckPasswordHashDone() bool {
	if m.CheckPasswordHashMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CheckPasswordHashMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CheckPasswordHashMock.invocationsDone()
}

// MinimockCheckPasswordHashInspect logs each unmet expectation
func (m *PasswordHasherMock) MinimockCheckPasswordHashInspect() {
	for _, e := range m.CheckPasswordHashMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PasswordHasherMock.CheckPasswordHash at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCheckPasswordHashCounter := mm_atomic.LoadUint64(&m.afterCheckPasswordHashCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CheckPasswordHashMock.defaultExpectation != nil && afterCheckPasswordHashCounter < 1 {
		if m.CheckPasswordHashMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to PasswordHasherMock.CheckPasswordHash at\n%s", m.CheckPasswordHashMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to PasswordHasherMock.CheckPasswordHash at\n%s with params: %#v", m.CheckPasswordHashMock.defaultExpectation.expectationOrigins.origin, *m.CheckPasswordHashMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckPasswordHash != nil && afterCheckPasswordHashCounter < 1 {
		m.t.Errorf("Expected call to PasswordHasherMock.CheckPasswordHash at\n%s", m.funcCheckPasswordHashOrigin)
	}

	if !m.CheckPasswordHashMock.invocationsDone() && afterCheckPasswordHashCounter > 0 {
		m.t.Errorf("Expected %d calls to PasswordHasherMock.CheckPasswordHash at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CheckPasswordHashMock.expectedInvocations), m.CheckPasswordHashMock.expectedInvocationsOrigin, afterCheckPasswordHashCounter)
	}
}

type mPasswordHasherMockHashRefreshToken struct {
	optional           bool
	mock               *PasswordHasherMock
	defaultExpectation *PasswordHasherMockHashRefreshTokenExpectation
	expectations       []*PasswordHasherMockHashRefreshTokenExpectation

	callArgs []*PasswordHasherMockHashRefreshTokenParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// PasswordHasherMockHashRefreshTokenExpectation specifies expectation struct of the PasswordHasher.HashRefreshToken
type PasswordHasherMockHashRefreshTokenExpectation struct {
	mock               *PasswordHasherMock
	params             *PasswordHasherMockHashRefreshTokenParams
	paramPtrs          *PasswordHasherMockHashRefreshTokenParamPtrs
	expectationOrigins PasswordHasherMockHashRefreshTokenExpectationOrigins
	results            *PasswordHasherMockHashRefreshTokenResults
	returnOrigin       string
	Counter            uint64
}

// PasswordHasherMockHashRefreshTokenParams contains parameters of the PasswordHasher.HashRefreshToken
type PasswordHasherMockHashRefreshTokenParams struct {
	token []byte
}

// PasswordHasherMockHashRefreshTokenParamPtrs contains pointers to parameters of the PasswordHasher.HashRefreshToken
type PasswordHasherMockHashRefreshTokenParamPtrs struct {
	token *[]byte
}

// PasswordHasherMockHashRefreshTokenResults contains results of the PasswordHasher.HashRefreshToken
type PasswordHasherMockHashRefreshTokenResults struct {
	ba1 []byte
	err error
}

// PasswordHasherMockHashRefreshTokenOrigins contains origins of expectations of the PasswordHasher.HashRefreshToken
type PasswordHasherMockHashRefreshTokenExpectationOrigins struct {
	origin      string
	originToken string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmHashRefreshToken *mPasswordHasherMockHashRefreshToken) Optional() *mPasswordHasherMockHashRefreshToken {
	mmHashRefreshToken.optional = true
	return mmHashRefreshToken
}

// Expect sets up expected params for PasswordHasher.HashRefreshToken
func (mmHashRefreshToken *mPasswordHasherMockHashRefreshToken) Expect(token []byte) *mPasswordHasherMockHashRefreshToken {
	if mmHashRefreshToken.mock.funcHashRefreshToken != nil {
		mmHashRefreshToken.mock.t.Fatalf("PasswordHasherMock.HashRefreshToken mock is already set by Set")
	}

	if mmHashRefreshToken.defaultExpectation == nil {
		mmHashRefreshToken.defaultExpectation = &PasswordHasherMockHashRefreshTokenExpectation{}
	}

	if mmHashRefreshToken.defaultExpectation.paramPtrs != nil {
		mmHashRefreshToken.mock.t.Fatalf("PasswordHasherMock.HashRefreshToken mock is already set by ExpectParams functions")
	}

	mmHashRefreshToken.defaultExpectation.params = &PasswordHasherMockHashRefreshTokenParams{token}
	mmHashRefreshToken.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmHashRefreshToken.expectations {
		if minimock.Equal(e.params, mmHashRefreshToken.defaultExpectation.params) {
			mmHashRefreshToken.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmHashRefreshToken.defaultExpectation.params)
		}
	}

	return mmHashRefreshToken
}

// ExpectTokenParam1 sets up expected param token for PasswordHasher.HashRefreshToken
func (mmHashRefreshToken *mPasswordHasherMockHashRefreshToken) ExpectTokenParam1(token []byte) *mPasswordHasherMockHashRefreshToken {
	if mmHashRefreshToken.mock.funcHashRefreshToken != nil {
		mmHashRefreshToken.mock.t.Fatalf("PasswordHasherMock.HashRefreshToken mock is already set by Set")
	}

	if mmHashRefreshToken.defaultExpectation == nil {
		mmHashRefreshToken.defaultExpectation = &PasswordHasherMockHashRefreshTokenExpectation{}
	}

	if mmHashRefreshToken.defaultExpectation.params != nil {
		mmHashRefreshToken.mock.t.Fatalf("PasswordHasherMock.HashRefreshToken mock is already set by Expect")
	}

	if mmHashRefreshToken.defaultExpectation.paramPtrs == nil {
		mmHashRefreshToken.defaultExpectation.paramPtrs = &PasswordHasherMockHashRefreshTokenParamPtrs{}
	}
	mmHashRefreshToken.defaultExpectation.paramPtrs.token = &token
	mmHashRefreshToken.defaultExpectation.expectationOrigins.originToken = minimock.CallerInfo(1)

	return mmHashRefreshToken
}

// Inspect accepts an inspector function that has same arguments as the PasswordHasher.HashRefreshToken
func (mmHashRefreshToken *mPasswordHasherMockHashRefreshToken) Inspect(f func(token []byte)) *mPasswordHasherMockHashRefreshToken {
	if mmHashRefreshToken.mock.inspectFuncHashRefreshToken != nil {
		mmHashRefreshToken.mock.t.Fatalf("Inspect function is already set for PasswordHasherMock.HashRefreshToken")
	}

	mmHashRefreshToken.mock.inspectFuncHashRefreshToken = f

	return mmHashRefreshToken
}

// Return sets up results that will be returned by PasswordHasher.HashRefreshToken
func (mmHashRefreshToken *mPasswordHasherMockHashRefreshToken) Return(ba1 []byte, err error) *PasswordHasherMock {
	if mmHashRefreshToken.mock.funcHashRefreshToken != nil {
		mmHashRefreshToken.mock.t.Fatalf("PasswordHasherMock.HashRefreshToken mock is already set by Set")
	}

	if mmHashRefreshToken.defaultExpectation == nil {
		mmHashRefreshToken.defaultExpectation = &PasswordHasherMockHashRefreshTokenExpectation{mock: mmHashRefreshToken.mock}
	}
	mmHashRefreshToken.defaultExpectation.results = &PasswordHasherMockHashRefreshTokenResults{ba1, err}
	mmHashRefreshToken.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmHashRefreshToken.mock
}

// Set uses given function f to mock the PasswordHasher.HashRefreshToken method
func (mmHashRefreshToken *mPasswordHasherMockHashRefreshToken) Set(f func(token []byte) (ba1 []byte, err error)) *PasswordHasherMock {
	if mmHashRefreshToken.defaultExpectation != nil {
		mmHashRefreshToken.mock.t.Fatalf("Default expectation is already set for the PasswordHasher.HashRefreshToken method")
	}

	if len(mmHashRefreshToken.expectations) > 0 {
		mmHashRefreshToken.mock.t.Fatalf("Some expectations are already set for the PasswordHasher.HashRefreshToken method")
	}

	mmHashRefreshToken.mock.funcHashRefreshToken = f
	mmHashRefreshToken.mock.funcHashRefreshTokenOrigin = minimock.CallerInfo(1)
	return mmHashRefreshToken.mock
}

// When sets expectation for the PasswordHasher.HashRefreshToken which will trigger the result defined by the following
// Then helper
func (mmHashRefreshToken *mPasswordHasherMockHashRefreshToken) When(token []byte) *PasswordHasherMockHashRefreshTokenExpectation {
	if mmHashRefreshToken.mock.funcHashRefreshToken != nil {
		mmHashRefreshToken.mock.t.Fatalf("PasswordHasherMock.HashRefreshToken mock is already set by Set")
	}

	expectation := &PasswordHasherMockHashRefreshTokenExpectation{
		mock:               mmHashRefreshToken.mock,
		params:             &PasswordHasherMockHashRefreshTokenParams{token},
		expectationOrigins: PasswordHasherMockHashRefreshTokenExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmHashRefreshToken.expectations = append(mmHashRefreshToken.expectations, expectation)
	return expectation
}

// Then sets up PasswordHasher.HashRefreshToken return parameters for the expectation previously defined by the When method
func (e *PasswordHasherMockHashRefreshTokenExpectation) Then(ba1 []byte, err error) *PasswordHasherMock {
	e.results = &PasswordHasherMockHashRefreshTokenResults{ba1, err}
	return e.mock
}

// Times sets number of times PasswordHasher.HashRefreshToken should be invoked
func (mmHashRefreshToken *mPasswordHasherMockHashRefreshToken) Times(n uint64) *mPasswordHasherMockHashRefreshToken {
	if n == 0 {
		mmHashRefreshToken.mock.t.Fatalf("Times of PasswordHasherMock.HashRefreshToken mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmHashRefreshToken.expectedInvocations, n)
	mmHashRefreshToken.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmHashRefreshToken
}

func (mmHashRefreshToken *mPasswordHasherMockHashRefreshToken) invocationsDone() bool {
	if len(mmHashRefreshToken.expectations) == 0 && mmHashRefreshToken.defaultExpectation == nil && mmHashRefreshToken.mock.funcHashRefreshToken == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmHashRefreshToken.mock.afterHashRefreshTokenCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmHashRefreshToken.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// HashRefreshToken implements mm_auth.PasswordHasher
func (mmHashRefreshToken *PasswordHasherMock) HashRefreshToken(token []byte) (ba1 []byte, err error) {
	mm_atomic.AddUint64(&mmHashRefreshToken.beforeHashRefreshTokenCounter, 1)
	defer mm_atomic.AddUint64(&mmHashRefreshToken.afterHashRefreshTokenCounter, 1)

	mmHashRefreshToken.t.Helper()

	if mmHashRefreshToken.inspectFuncHashRefreshToken != nil {
		mmHashRefreshToken.inspectFuncHashRefreshToken(token)
	}

	mm_params := PasswordHasherMockHashRefreshTokenParams{token}

	// Record call args
	mmHashRefreshToken.HashRefreshTokenMock.mutex.Lock()
	mmHashRefreshToken.HashRefreshTokenMock.callArgs = append(mmHashRefreshToken.HashRefreshTokenMock.callArgs, &mm_params)
	mmHashRefreshToken.HashRefreshTokenMock.mutex.Unlock()

	for _, e := range mmHashRefreshToken.HashRefreshTokenMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ba1, e.results.err
		}
	}

	if mmHashRefreshToken.HashRefreshTokenMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmHashRefreshToken.HashRefreshTokenMock.defaultExpectation.Counter, 1)
		mm_want := mmHashRefreshToken.HashRefreshTokenMock.defaultExpectation.params
		mm_want_ptrs := mmHashRefreshToken.HashRefreshTokenMock.defaultExpectation.paramPtrs

		mm_got := PasswordHasherMockHashRefreshTokenParams{token}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.token != nil && !minimock.Equal(*mm_want_ptrs.token, mm_got.token) {
				mmHashRefreshToken.t.Errorf("PasswordHasherMock.HashRefreshToken got unexpected parameter token, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmHashRefreshToken.HashRefreshTokenMock.defaultExpectation.expectationOrigins.originToken, *mm_want_ptrs.token, mm_got.token, minimock.Diff(*mm_want_ptrs.token, mm_got.token))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmHashRefreshToken.t.Errorf("PasswordHasherMock.HashRefreshToken got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmHashRefreshToken.HashRefreshTokenMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmHashRefreshToken.HashRefreshTokenMock.defaultExpectation.results
		if mm_results == nil {
			mmHashRefreshToken.t.Fatal("No results are set for the PasswordHasherMock.HashRefreshToken")
		}
		return (*mm_results).ba1, (*mm_results).err
	}
	if mmHashRefreshToken.funcHashRefreshToken != nil {
		return mmHashRefreshToken.funcHashRefreshToken(token)
	}
	mmHashRefreshToken.t.Fatalf("Unexpected call to PasswordHasherMock.HashRefreshToken. %v", token)
	return
}

// HashRefreshTokenAfterCounter returns a count of finished PasswordHasherMock.HashRefreshToken invocations
func (mmHashRefreshToken *PasswordHasherMock) HashRefreshTokenAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHashRefreshToken.afterHashRefreshTokenCounter)
}

// HashRefreshTokenBeforeCounter returns a count of PasswordHasherMock.HashRefreshToken invocations
func (mmHashRefreshToken *PasswordHasherMock) HashRefreshTokenBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHashRefreshToken.beforeHashRefreshTokenCounter)
}

// Calls returns a list of arguments used in each call to PasswordHasherMock.HashRefreshToken.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmHashRefreshToken *mPasswordHasherMockHashRefreshToken) Calls() []*PasswordHasherMockHashRefreshTokenParams {
	mmHashRefreshToken.mutex.RLock()

	argCopy := make([]*PasswordHasherMockHashRefreshTokenParams, len(mmHashRefreshToken.callArgs))
	copy(argCopy, mmHashRefreshToken.callArgs)

	mmHashRefreshToken.mutex.RUnlock()

	return argCopy
}

// MinimockHashRefreshTokenDone returns true if the count of the HashRefreshToken invocations corresponds
// the number of defined expectations
func (m *PasswordHasherMock) MinimockHashRefreshTokenDone() bool {
	if m.HashRefreshTokenMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.HashRefreshTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.HashRefreshTokenMock.invocationsDone()
}

// MinimockHashRefreshTokenInspect logs each unmet expectation
func (m *PasswordHasherMock) MinimockHashRefreshTokenInspect() {
	for _, e := range m.HashRefreshTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PasswordHasherMock.HashRefreshToken at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterHashRefreshTokenCounter := mm_atomic.LoadUint64(&m.afterHashRefreshTokenCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.HashRefreshTokenMock.defaultExpectation != nil && afterHashRefreshTokenCounter < 1 {
		if m.HashRefreshTokenMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to PasswordHasherMock.HashRefreshToken at\n%s", m.HashRefreshTokenMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to PasswordHasherMock.HashRefreshToken at\n%s with params: %#v", m.HashRefreshTokenMock.defaultExpectation.expectationOrigins.origin, *m.HashRefreshTokenMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcHashRefreshToken != nil && afterHashRefreshTokenCounter < 1 {
		m.t.Errorf("Expected call to PasswordHasherMock.HashRefreshToken at\n%s", m.funcHashRefreshTokenOrigin)
	}

	if !m.HashRefreshTokenMock.invocationsDone() && afterHashRefreshTokenCounter > 0 {
		m.t.Errorf("Expected %d calls to PasswordHasherMock.HashRefreshToken at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.HashRefreshTokenMock.expectedInvocations), m.HashRefreshTokenMock.expectedInvocationsOrigin, afterHashRefreshTokenCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PasswordHasherMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCheckPasswordHashInspect()

			m.MinimockHashRefreshTokenInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PasswordHasherMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PasswordHasherMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCheckPasswordHashDone() &&
		m.MinimockHashRefreshTokenDone()
}

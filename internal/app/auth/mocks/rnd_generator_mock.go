// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/66gu1/easygodocs/internal/app/auth.RNDGenerator -o rnd_generator_mock.go -n RNDGeneratorMock -p mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// RNDGeneratorMock implements mm_auth.RNDGenerator
type RNDGeneratorMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcNew          func(n int) (s1 string, err error)
	funcNewOrigin    string
	inspectFuncNew   func(n int)
	afterNewCounter  uint64
	beforeNewCounter uint64
	NewMock          mRNDGeneratorMockNew
}

// NewRNDGeneratorMock returns a mock for mm_auth.RNDGenerator
func NewRNDGeneratorMock(t minimock.Tester) *RNDGeneratorMock {
	m := &RNDGeneratorMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.NewMock = mRNDGeneratorMockNew{mock: m}
	m.NewMock.callArgs = []*RNDGeneratorMockNewParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mRNDGeneratorMockNew struct {
	optional           bool
	mock               *RNDGeneratorMock
	defaultExpectation *RNDGeneratorMockNewExpectation
	expectations       []*RNDGeneratorMockNewExpectation

	callArgs []*RNDGeneratorMockNewParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// RNDGeneratorMockNewExpectation specifies expectation struct of the RNDGenerator.New
type RNDGeneratorMockNewExpectation struct {
	mock               *RNDGeneratorMock
	params             *RNDGeneratorMockNewParams
	paramPtrs          *RNDGeneratorMockNewParamPtrs
	expectationOrigins RNDGeneratorMockNewExpectationOrigins
	results            *RNDGeneratorMockNewResults
	returnOrigin       string
	Counter            uint64
}

// RNDGeneratorMockNewParams contains parameters of the RNDGenerator.New
type RNDGeneratorMockNewParams struct {
	n int
}

// RNDGeneratorMockNewParamPtrs contains pointers to parameters of the RNDGenerator.New
type RNDGeneratorMockNewParamPtrs struct {
	n *int
}

// RNDGeneratorMockNewResults contains results of the RNDGenerator.New
type RNDGeneratorMockNewResults struct {
	s1  string
	err error
}

// RNDGeneratorMockNewOrigins contains origins of expectations of the RNDGenerator.New
type RNDGeneratorMockNewExpectationOrigins struct {
	origin  string
	originN string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmNew *mRNDGeneratorMockNew) Optional() *mRNDGeneratorMockNew {
	mmNew.optional = true
	return mmNew
}

// Expect sets up expected params for RNDGenerator.New
func (mmNew *mRNDGeneratorMockNew) Expect(n int) *mRNDGeneratorMockNew {
	if mmNew.mock.funcNew != nil {
		mmNew.mock.t.Fatalf("RNDGeneratorMock.New mock is already set by Set")
	}

	if mmNew.defaultExpectation == nil {
		mmNew.defaultExpectation = &RNDGeneratorMockNewExpectation{}
	}

	if mmNew.defaultExpectation.paramPtrs != nil {
		mmNew.mock.t.Fatalf("RNDGeneratorMock.New mock is already set by ExpectParams functions")
	}

	mmNew.defaultExpectation.params = &RNDGeneratorMockNewParams{n}
	mmNew.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmNew.expectations {
		if minimock.Equal(e.params, mmNew.defaultExpectation.params) {
			mmNew.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmNew.defaultExpectation.params)
		}
	}

	return mmNew
}

// ExpectNParam1 sets up expected param n for RNDGenerator.New
func (mmNew *mRNDGeneratorMockNew) ExpectNParam1(n int) *mRNDGeneratorMockNew {
	if mmNew.mock.funcNew != nil {
		mmNew.mock.t.Fatalf("RNDGeneratorMock.New mock is already set by Set")
	}

	if mmNew.defaultExpectation == nil {
		mmNew.defaultExpectation = &RNDGeneratorMockNewExpectation{}
	}

	if mmNew.defaultExpectation.params != nil {
		mmNew.mock.t.Fatalf("RNDGeneratorMock.New mock is already set by Expect")
	}

	if mmNew.defaultExpectation.paramPtrs == nil {
		mmNew.defaultExpectation.paramPtrs = &RNDGeneratorMockNewParamPtrs{}
	}
	mmNew.defaultExpectation.paramPtrs.n = &n
	mmNew.defaultExpectation.expectationOrigins.originN = minimock.CallerInfo(1)

	return mmNew
}

// Inspect accepts an inspector function that has same arguments as the RNDGenerator.New
func (mmNew *mRNDGeneratorMockNew) Inspect(f func(n int)) *mRNDGeneratorMockNew {
	if mmNew.mock.inspectFuncNew != nil {
		mmNew.mock.t.Fatalf("Inspect function is already set for RNDGeneratorMock.New")
	}

	mmNew.mock.inspectFuncNew = f

	return mmNew
}

// Return sets up results that will be returned by RNDGenerator.New
func (mmNew *mRNDGeneratorMockNew) Return(s1 string, err error) *RNDGeneratorMock {
	if mmNew.mock.funcNew != nil {
		mmNew.mock.t.Fatalf("RNDGeneratorMock.New mock is already set by Set")
	}

	if mmNew.defaultExpectation == nil {
		mmNew.defaultExpectation = &RNDGeneratorMockNewExpectation{mock: mmNew.mock}
	}
	mmNew.defaultExpectation.results = &RNDGeneratorMockNewResults{s1, err}
	mmNew.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmNew.mock
}

// Set uses given function f to mock the RNDGenerator.New method
func (mmNew *mRNDGeneratorMockNew) Set(f func(n int) (s1 string, err error)) *RNDGeneratorMock {
	if mmNew.defaultExpectation != nil {
		mmNew.mock.t.Fatalf("Default expectation is already set for the RNDGenerator.New method")
	}

	if len(mmNew.expectations) > 0 {
		mmNew.mock.t.Fatalf("Some expectations are already set for the RNDGenerator.New method")
	}

	mmNew.mock.funcNew = f
	mmNew.mock.funcNewOrigin = minimock.CallerInfo(1)
	return mmNew.mock
}

// When sets expectation for the RNDGenerator.New which will trigger the result defined by the following
// Then helper
func (mmNew *mRNDGeneratorMockNew) When(n int) *RNDGeneratorMockNewExpectation {
	if mmNew.mock.funcNew != nil {
		mmNew.mock.t.Fatalf("RNDGeneratorMock.New mock is already set by Set")
	}

	expectation := &RNDGeneratorMockNewExpectation{
		mock:               mmNew.mock,
		params:             &RNDGeneratorMockNewParams{n},
		expectationOrigins: RNDGeneratorMockNewExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmNew.expectations = append(mmNew.expectations, expectation)
	return expectation
}

// Then sets up RNDGenerator.New return parameters for the expectation previously defined by the When method
func (e *RNDGeneratorMockNewExpectation) Then(s1 string, err error) *RNDGeneratorMock {
	e.results = &RNDGeneratorMockNewResults{s1, err}
	return e.mock
}

// Times sets number of times RNDGenerator.New should be invoked
func (mmNew *mRNDGeneratorMockNew) Times(n uint64) *mRNDGeneratorMockNew {
	if n == 0 {
		mmNew.mock.t.Fatalf("Times of RNDGeneratorMock.New mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmNew.expectedInvocations, n)
	mmNew.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmNew
}

func (mmNew *mRNDGeneratorMockNew) invocationsDone() bool {
	if len(mmNew.expectations) == 0 && mmNew.defaultExpectation == nil && mmNew.mock.funcNew == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmNew.mock.afterNewCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmNew.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// New implements mm_auth.RNDGenerator
func (mmNew *RNDGeneratorMock) New(n int) (s1 string, err error) {
	mm_atomic.AddUint64(&mmNew.beforeNewCounter, 1)
	defer mm_atomic.AddUint64(&mmNew.afterNewCounter, 1)

	mmNew.t.Helper()

	if mmNew.inspectFuncNew != nil {
		mmNew.inspectFuncNew(n)
	}

	mm_params := RNDGeneratorMockNewParams{n}

	// Record call args
	mmNew.NewMock.mutex.Lock()
	mmNew.NewMock.callArgs = append(mmNew.NewMock.callArgs, &mm_params)
	mmNew.NewMock.mutex.Unlock()

	for _, e := range mmNew.NewMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmNew.NewMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNew.NewMock.defaultExpectation.Counter, 1)
		mm_want := mmNew.NewMock.defaultExpectation.params
		mm_want_ptrs := mmNew.NewMock.defaultExpectation.paramPtrs

		mm_got := RNDGeneratorMockNewParams{n}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.n != nil && !minimock.Equal(*mm_want_ptrs.n, mm_got.n) {
				mmNew.t.Errorf("RNDGeneratorMock.New got unexpected parameter n, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmNew.NewMock.defaultExpectation.expectationOrigins.originN, *mm_want_ptrs.n, mm_got.n, minimock.Diff(*mm_want_ptrs.n, mm_got.n))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmNew.t.Errorf("RNDGeneratorMock.New got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmNew.NewMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmNew.NewMock.defaultExpectation.results
		if mm_results == nil {
			mmNew.t.Fatal("No results are set for the RNDGeneratorMock.New")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmNew.funcNew != nil {
		return mmNew.funcNew(n)
	}
	mmNew.t.Fatalf("Unexpected call to RNDGeneratorMock.New. %v", n)
	return
}

// NewAfterCounter returns a count of finished RNDGeneratorMock.New invocations
func (mmNew *RNDGeneratorMock) NewAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNew.afterNewCounter)
}

// NewBeforeCounter returns a count of RNDGeneratorMock.New invocations
func (mmNew *RNDGeneratorMock) NewBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNew.beforeNewCounter)
}

// Calls returns a list of arguments used in each call to RNDGeneratorMock.New.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmNew *mRNDGeneratorMockNew) Calls() []*RNDGeneratorMockNewParams {
	mmNew.mutex.RLock()

	argCopy := make([]*RNDGeneratorMockNewParams, len(mmNew.callArgs))
	copy(argCopy, mmNew.callArgs)

	mmNew.mutex.RUnlock()

	return argCopy
}

// MinimockNewDone returns true if the count of the New invocations corresponds
// the number of defined expectations
func (m *RNDGeneratorMock) MinimockNewDone() bool {
	if m.NewMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.NewMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.NewMock.invocationsDone()
}

// MinimockNewInspect logs each unmet expectation
func (m *RNDGeneratorMock) MinimockNewInspect() {
	for _, e := range m.NewMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RNDGeneratorMock.New at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterNewCounter := mm_atomic.LoadUint64(&m.afterNewCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.NewMock.defaultExpectation != nil && afterNewCounter < 1 {
		if m.NewMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to RNDGeneratorMock.New at\n%s", m.NewMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to RNDGeneratorMock.New at\n%s with params: %#v", m.NewMock.defaultExpectation.expectationOrigins.origin, *m.NewMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNew != nil && afterNewCounter < 1 {
		m.t.Errorf("Expected call to RNDGeneratorMock.New at\n%s", m.funcNewOrigin)
	}

	if !m.NewMock.invocationsDone() && afterNewCounter > 0 {
		m.t.Errorf("Expected %d calls to RNDGeneratorMock.New at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.NewMock.expectedInvocations), m.NewMock.expectedInvocationsOrigin, afterNewCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RNDGeneratorMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockNewInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RNDGeneratorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RNDGeneratorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockNewDone()
}

// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/66gu1/easygodocs/internal/app/entity/usecase.AuthCore -o auth_core_mock.go -n AuthCoreMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/66gu1/easygodocs/internal/app/auth"
	"github.com/gojuno/minimock/v3"
	"github.com/google/uuid"
)

// AuthCoreMock implements mm_usecase.AuthCore
type AuthCoreMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetCurrentUserDirectPermissions          func(ctx context.Context, role auth.Role) (ids []uuid.UUID, isAdmin bool, err error)
	funcGetCurrentUserDirectPermissionsOrigin    string
	inspectFuncGetCurrentUserDirectPermissions   func(ctx context.Context, role auth.Role)
	afterGetCurrentUserDirectPermissionsCounter  uint64
	beforeGetCurrentUserDirectPermissionsCounter uint64
	GetCurrentUserDirectPermissionsMock          mAuthCoreMockGetCurrentUserDirectPermissions
}

// NewAuthCoreMock returns a mock for mm_usecase.AuthCore
func NewAuthCoreMock(t minimock.Tester) *AuthCoreMock {
	m := &AuthCoreMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetCurrentUserDirectPermissionsMock = mAuthCoreMockGetCurrentUserDirectPermissions{mock: m}
	m.GetCurrentUserDirectPermissionsMock.callArgs = []*AuthCoreMockGetCurrentUserDirectPermissionsParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mAuthCoreMockGetCurrentUserDirectPermissions struct {
	optional           bool
	mock               *AuthCoreMock
	defaultExpectation *AuthCoreMockGetCurrentUserDirectPermissionsExpectation
	expectations       []*AuthCoreMockGetCurrentUserDirectPermissionsExpectation

	callArgs []*AuthCoreMockGetCurrentUserDirectPermissionsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AuthCoreMockGetCurrentUserDirectPermissionsExpectation specifies expectation struct of the AuthCore.GetCurrentUserDirectPermissions
type AuthCoreMockGetCurrentUserDirectPermissionsExpectation struct {
	mock               *AuthCoreMock
	params             *AuthCoreMockGetCurrentUserDirectPermissionsParams
	paramPtrs          *AuthCoreMockGetCurrentUserDirectPermissionsParamPtrs
	expectationOrigins AuthCoreMockGetCurrentUserDirectPermissionsExpectationOrigins
	results            *AuthCoreMockGetCurrentUserDirectPermissionsResults
	returnOrigin       string
	Counter            uint64
}

// AuthCoreMockGetCurrentUserDirectPermissionsParams contains parameters of the AuthCore.GetCurrentUserDirectPermissions
type AuthCoreMockGetCurrentUserDirectPermissionsParams struct {
	ctx  context.Context
	role auth.Role
}

// AuthCoreMockGetCurrentUserDirectPermissionsParamPtrs contains pointers to parameters of the AuthCore.GetCurrentUserDirectPermissions
type AuthCoreMockGetCurrentUserDirectPermissionsParamPtrs struct {
	ctx  *context.Context
	role *auth.Role
}

// AuthCoreMockGetCurrentUserDirectPermissionsResults contains results of the AuthCore.GetCurrentUserDirectPermissions
type AuthCoreMockGetCurrentUserDirectPermissionsResults struct {
	ids     []uuid.UUID
	isAdmin bool
	err     error
}

// AuthCoreMockGetCurrentUserDirectPermissionsOrigins contains origins of expectations of the AuthCore.GetCurrentUserDirectPermissions
type AuthCoreMockGetCurrentUserDirectPermissionsExpectationOrigins struct {
	origin     string
	originCtx  string
	originRole string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetCurrentUserDirectPermissions *mAuthCoreMockGetCurrentUserDirectPermissions) Optional() *mAuthCoreMockGetCurrentUserDirectPermissions {
	mmGetCurrentUserDirectPermissions.optional = true
	return mmGetCurrentUserDirectPermissions
}

// Expect sets up expected params for AuthCore.GetCurrentUserDirectPermissions
func (mmGetCurrentUserDirectPermissions *mAuthCoreMockGetCurrentUserDirectPermissions) Expect(ctx context.Context, role auth.Role) *mAuthCoreMockGetCurrentUserDirectPermissions {
	if mmGetCurrentUserDirectPermissions.mock.funcGetCurrentUserDirectPermissions != nil {
		mmGetCurrentUserDirectPermissions.mock.t.Fatalf("AuthCoreMock.GetCurrentUserDirectPermissions mock is already set by Set")
	}

	if mmGetCurrentUserDirectPermissions.defaultExpectation == nil {
		mmGetCurrentUserDirectPermissions.defaultExpectation = &AuthCoreMockGetCurrentUserDirectPermissionsExpectation{}
	}

	if mmGetCurrentUserDirectPermissions.defaultExpectation.paramPtrs != nil {
		mmGetCurrentUserDirectPermissions.mock.t.Fatalf("AuthCoreMock.GetCurrentUserDirectPermissions mock is already set by ExpectParams functions")
	}

	mmGetCurrentUserDirectPermissions.defaultExpectation.params = &AuthCoreMockGetCurrentUserDirectPermissionsParams{ctx, role}
	mmGetCurrentUserDirectPermissions.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetCurrentUserDirectPermissions.expectations {
		if minimock.Equal(e.params, mmGetCurrentUserDirectPermissions.defaultExpectation.params) {
			mmGetCurrentUserDirectPermissions.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetCurrentUserDirectPermissions.defaultExpectation.params)
		}
	}

	return mmGetCurrentUserDirectPermissions
}

// ExpectCtxParam1 sets up expected param ctx for AuthCore.GetCurrentUserDirectPermissions
func (mmGetCurrentUserDirectPermissions *mAuthCoreMockGetCurrentUserDirectPermissions) ExpectCtxParam1(ctx context.Context) *mAuthCoreMockGetCurrentUserDirectPermissions {
	if mmGetCurrentUserDirectPermissions.mock.funcGetCurrentUserDirectPermissions != nil {
		mmGetCurrentUserDirectPermissions.mock.t.Fatalf("AuthCoreMock.GetCurrentUserDirectPermissions mock is already set by Set")
	}

	if mmGetCurrentUserDirectPermissions.defaultExpectation == nil {
		mmGetCurrentUserDirectPermissions.defaultExpectation = &AuthCoreMockGetCurrentUserDirectPermissionsExpectation{}
	}

	if mmGetCurrentUserDirectPermissions.defaultExpectation.params != nil {
		mmGetCurrentUserDirectPermissions.mock.t.Fatalf("AuthCoreMock.GetCurrentUserDirectPermissions mock is already set by Expect")
	}

	if mmGetCurrentUserDirectPermissions.defaultExpectation.paramPtrs == nil {
		mmGetCurrentUserDirectPermissions.defaultExpectation.paramPtrs = &AuthCoreMockGetCurrentUserDirectPermissionsParamPtrs{}
	}
	mmGetCurrentUserDirectPermissions.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetCurrentUserDirectPermissions.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetCurrentUserDirectPermissions
}

// ExpectRoleParam2 sets up expected param role for AuthCore.GetCurrentUserDirectPermissions
func (mmGetCurrentUserDirectPermissions *mAuthCoreMockGetCurrentUserDirectPermissions) ExpectRoleParam2(role auth.Role) *mAuthCoreMockGetCurrentUserDirectPermissions {
	if mmGetCurrentUserDirectPermissions.mock.funcGetCurrentUserDirectPermissions != nil {
		mmGetCurrentUserDirectPermissions.mock.t.Fatalf("AuthCoreMock.GetCurrentUserDirectPermissions mock is already set by Set")
	}

	if mmGetCurrentUserDirectPermissions.defaultExpectation == nil {
		mmGetCurrentUserDirectPermissions.defaultExpectation = &AuthCoreMockGetCurrentUserDirectPermissionsExpectation{}
	}

	if mmGetCurrentUserDirectPermissions.defaultExpectation.params != nil {
		mmGetCurrentUserDirectPermissions.mock.t.Fatalf("AuthCoreMock.GetCurrentUserDirectPermissions mock is already set by Expect")
	}

	if mmGetCurrentUserDirectPermissions.defaultExpectation.paramPtrs == nil {
		mmGetCurrentUserDirectPermissions.defaultExpectation.paramPtrs = &AuthCoreMockGetCurrentUserDirectPermissionsParamPtrs{}
	}
	mmGetCurrentUserDirectPermissions.defaultExpectation.paramPtrs.role = &role
	mmGetCurrentUserDirectPermissions.defaultExpectation.expectationOrigins.originRole = minimock.CallerInfo(1)

	return mmGetCurrentUserDirectPermissions
}

// Inspect accepts an inspector function that has same arguments as the AuthCore.GetCurrentUserDirectPermissions
func (mmGetCurrentUserDirectPermissions *mAuthCoreMockGetCurrentUserDirectPermissions) Inspect(f func(ctx context.Context, role auth.Role)) *mAuthCoreMockGetCurrentUserDirectPermissions {
	if mmGetCurrentUserDirectPermissions.mock.inspectFuncGetCurrentUserDirectPermissions != nil {
		mmGetCurrentUserDirectPermissions.mock.t.Fatalf("Inspect function is already set for AuthCoreMock.GetCurrentUserDirectPermissions")
	}

	mmGetCurrentUserDirectPermissions.mock.inspectFuncGetCurrentUserDirectPermissions = f

	return mmGetCurrentUserDirectPermissions
}

// Return sets up results that will be returned by AuthCore.GetCurrentUserDirectPermissions
func (mmGetCurrentUserDirectPermissions *mAuthCoreMockGetCurrentUserDirectPermissions) Return(ids []uuid.UUID, isAdmin bool, err error) *AuthCoreMock {
	if mmGetCurrentUserDirectPermissions.mock.funcGetCurrentUserDirectPermissions != nil {
		mmGetCurrentUserDirectPermissions.mock.t.Fatalf("AuthCoreMock.GetCurrentUserDirectPermissions mock is already set by Set")
	}

	if mmGetCurrentUserDirectPermissions.defaultExpectation == nil {
		mmGetCurrentUserDirectPermissions.defaultExpectation = &AuthCoreMockGetCurrentUserDirectPermissionsExpectation{mock: mmGetCurrentUserDirectPermissions.mock}
	}
	mmGetCurrentUserDirectPermissions.defaultExpectation.results = &AuthCoreMockGetCurrentUserDirectPermissionsResults{ids, isAdmin, err}
	mmGetCurrentUserDirectPermissions.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetCurrentUserDirectPermissions.mock
}

// Set uses given function f to mock the AuthCore.GetCurrentUserDirectPermissions method
func (mmGetCurrentUserDirectPermissions *mAuthCoreMockGetCurrentUserDirectPermissions) Set(f func(ctx context.Context, role auth.Role) (ids []uuid.UUID, isAdmin bool, err error)) *AuthCoreMock {
	if mmGetCurrentUserDirectPermissions.defaultExpectation != nil {
		mmGetCurrentUserDirectPermissions.mock.t.Fatalf("Default expectation is already set for the AuthCore.GetCurrentUserDirectPermissions method")
	}

	if len(mmGetCurrentUserDirectPermissions.expectations) > 0 {
		mmGetCurrentUserDirectPermissions.mock.t.Fatalf("Some expectations are already set for the AuthCore.GetCurrentUserDirectPermissions method")
	}

	mmGetCurrentUserDirectPermissions.mock.funcGetCurrentUserDirectPermissions = f
	mmGetCurrentUserDirectPermissions.mock.funcGetCurrentUserDirectPermissionsOrigin = minimock.CallerInfo(1)
	return mmGetCurrentUserDirectPermissions.mock
}

// When sets expectation for the AuthCore.GetCurrentUserDirectPermissions which will trigger the result defined by the following
// Then helper
func (mmGetCurrentUserDirectPermissions *mAuthCoreMockGetCurrentUserDirectPermissions) When(ctx context.Context, role auth.Role) *AuthCoreMockGetCurrentUserDirectPermissionsExpectation {
	if mmGetCurrentUserDirectPermissions.mock.funcGetCurrentUserDirectPermissions != nil {
		mmGetCurrentUserDirectPermissions.mock.t.Fatalf("AuthCoreMock.GetCurrentUserDirectPermissions mock is already set by Set")
	}

	expectation := &AuthCoreMockGetCurrentUserDirectPermissionsExpectation{
		mock:               mmGetCurrentUserDirectPermissions.mock,
		params:             &AuthCoreMockGetCurrentUserDirectPermissionsParams{ctx, role},
		expectationOrigins: AuthCoreMockGetCurrentUserDirectPermissionsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetCurrentUserDirectPermissions.expectations = append(mmGetCurrentUserDirectPermissions.expectations, expectation)
	return expectation
}

// Then sets up AuthCore.GetCurrentUserDirectPermissions return parameters for the expectation previously defined by the When method
func (e *AuthCoreMockGetCurrentUserDirectPermissionsExpectation) Then(ids []uuid.UUID, isAdmin bool, err error) *AuthCoreMock {
	e.results = &AuthCoreMockGetCurrentUserDirectPermissionsResults{ids, isAdmin, err}
	return e.mock
}

// Times sets number of times AuthCore.GetCurrentUserDirectPermissions should be invoked
func (mmGetCurrentUserDirectPermissions *mAuthCoreMockGetCurrentUserDirectPermissions) Times(n uint64) *mAuthCoreMockGetCurrentUserDirectPermissions {
	if n == 0 {
		mmGetCurrentUserDirectPermissions.mock.t.Fatalf("Times of AuthCoreMock.GetCurrentUserDirectPermissions mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetCurrentUserDirectPermissions.expectedInvocations, n)
	mmGetCurrentUserDirectPermissions.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetCurrentUserDirectPermissions
}

func (mmGetCurrentUserDirectPermissions *mAuthCoreMockGetCurrentUserDirectPermissions) invocationsDone() bool {
	if len(mmGetCurrentUserDirectPermissions.expectations) == 0 && mmGetCurrentUserDirectPermissions.defaultExpectation == nil && mmGetCurrentUserDirectPermissions.mock.funcGetCurrentUserDirectPermissions == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetCurrentUserDirectPermissions.mock.afterGetCurrentUserDirectPermissionsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetCurrentUserDirectPermissions.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetCurrentUserDirectPermissions implements mm_usecase.AuthCore
func (mmGetCurrentUserDirectPermissions *AuthCoreMock) GetCurrentUserDirectPermissions(ctx context.Context, role auth.Role) (ids []uuid.UUID, isAdmin bool, err error) {
	mm_atomic.AddUint64(&mmGetCurrentUserDirectPermissions.beforeGetCurrentUserDirectPermissionsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetCurrentUserDirectPermissions.afterGetCurrentUserDirectPermissionsCounter, 1)

	mmGetCurrentUserDirectPermissions.t.Helper()

	if mmGetCurrentUserDirectPermissions.inspectFuncGetCurrentUserDirectPermissions != nil {
		mmGetCurrentUserDirectPermissions.inspectFuncGetCurrentUserDirectPermissions(ctx, role)
	}

	mm_params := AuthCoreMockGetCurrentUserDirectPermissionsParams{ctx, role}

	// Record call args
	mmGetCurrentUserDirectPermissions.GetCurrentUserDirectPermissionsMock.mutex.Lock()
	mmGetCurrentUserDirectPermissions.GetCurrentUserDirectPermissionsMock.callArgs = append(mmGetCurrentUserDirectPermissions.GetCurrentUserDirectPermissionsMock.callArgs, &mm_params)
	mmGetCurrentUserDirectPermissions.GetCurrentUserDirectPermissionsMock.mutex.Unlock()

	for _, e := range mmGetCurrentUserDirectPermissions.GetCurrentUserDirectPermissionsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ids, e.results.isAdmin, e.results.err
		}
	}

	if mmGetCurrentUserDirectPermissions.GetCurrentUserDirectPermissionsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetCurrentUserDirectPermissions.GetCurrentUserDirectPermissionsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetCurrentUserDirectPermissions.GetCurrentUserDirectPermissionsMock.defaultExpectation.params
		mm_want_ptrs := mmGetCurrentUserDirectPermissions.GetCurrentUserDirectPermissionsMock.defaultExpectation.paramPtrs

		mm_got := AuthCoreMockGetCurrentUserDirectPermissionsParams{ctx, role}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetCurrentUserDirectPermissions.t.Errorf("AuthCoreMock.GetCurrentUserDirectPermissions got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetCurrentUserDirectPermissions.GetCurrentUserDirectPermissionsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.role != nil && !minimock.Equal(*mm_want_ptrs.role, mm_got.role) {
				mmGetCurrentUserDirectPermissions.t.Errorf("AuthCoreMock.GetCurrentUserDirectPermissions got unexpected parameter role, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetCurrentUserDirectPermissions.GetCurrentUserDirectPermissionsMock.defaultExpectation.expectationOrigins.originRole, *mm_want_ptrs.role, mm_got.role, minimock.Diff(*mm_want_ptrs.role, mm_got.role))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetCurrentUserDirectPermissions.t.Errorf("AuthCoreMock.GetCurrentUserDirectPermissions got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetCurrentUserDirectPermissions.GetCurrentUserDirectPermissionsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetCurrentUserDirectPermissions.GetCurrentUserDirectPermissionsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetCurrentUserDirectPermissions.t.Fatal("No results are set for the AuthCoreMock.GetCurrentUserDirectPermissions")
		}
		return (*mm_results).ids, (*mm_results).isAdmin, (*mm_results).err
	}
	if mmGetCurrentUserDirectPermissions.funcGetCurrentUserDirectPermissions != nil {
		return mmGetCurrentUserDirectPermissions.funcGetCurrentUserDirectPermissions(ctx, role)
	}
	mmGetCurrentUserDirectPermissions.t.Fatalf("Unexpected call to AuthCoreMock.GetCurrentUserDirectPermissions. %v %v", ctx, role)
	return
}

// GetCurrentUserDirectPermissionsAfterCounter returns a count of finished AuthCoreMock.GetCurrentUserDirectPermissions invocations
func (mmGetCurrentUserDirectPermissions *AuthCoreMock) GetCurrentUserDirectPermissionsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCurrentUserDirectPermissions.afterGetCurrentUserDirectPermissionsCounter)
}

// GetCurrentUserDirectPermissionsBeforeCounter returns a count of AuthCoreMock.GetCurrentUserDirectPermissions invocations
func (mmGetCurrentUserDirectPermissions *AuthCoreMock) GetCurrentUserDirectPermissionsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCurrentUserDirectPermissions.beforeGetCurrentUserDirectPermissionsCounter)
}

// Calls returns a list of arguments used in each call to AuthCoreMock.GetCurrentUserDirectPermissions.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetCurrentUserDirectPermissions *mAuthCoreMockGetCurrentUserDirectPermissions) Calls() []*AuthCoreMockGetCurrentUserDirectPermissionsParams {
	mmGetCurrentUserDirectPermissions.mutex.RLock()

	argCopy := make([]*AuthCoreMockGetCurrentUserDirectPermissionsParams, len(mmGetCurrentUserDirectPermissions.callArgs))
	copy(argCopy, mmGetCurrentUserDirectPermissions.callArgs)

	mmGetCurrentUserDirectPermissions.mutex.RUnlock()

	return argCopy
}

// MinimockGetCurrentUserDirectPermissionsDone returns true if the count of the GetCurrentUserDirectPermissions invocations corresponds
// the number of defined expectations
func (m *AuthCoreMock) MinimockGetCurrentUserDirectPermissionsDone() bool {
	if m.GetCurrentUserDirectPermissionsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetCurrentUserDirectPermissionsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetCurrentUserDirectPermissionsMock.invocationsDone()
}

// MinimockGetCurrentUserDirectPermissionsInspect logs each unmet expectation
func (m *AuthCoreMock) MinimockGetCurrentUserDirectPermissionsInspect() {
	for _, e := range m.GetCurrentUserDirectPermissionsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthCoreMock.GetCurrentUserDirectPermissions at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetCurrentUserDirectPermissionsCounter := mm_atomic.LoadUint64(&m.afterGetCurrentUserDirectPermissionsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetCurrentUserDirectPermissionsMock.defaultExpectation != nil && afterGetCurrentUserDirectPermissionsCounter < 1 {
		if m.GetCurrentUserDirectPermissionsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AuthCoreMock.GetCurrentUserDirectPermissions at\n%s", m.GetCurrentUserDirectPermissionsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AuthCoreMock.GetCurrentUserDirectPermissions at\n%s with params: %#v", m.GetCurrentUserDirectPermissionsMock.defaultExpectation.expectationOrigins.origin, *m.GetCurrentUserDirectPermissionsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCurrentUserDirectPermissions != nil && afterGetCurrentUserDirectPermissionsCounter < 1 {
		m.t.Errorf("Expected call to AuthCoreMock.GetCurrentUserDirectPermissions at\n%s", m.funcGetCurrentUserDirectPermissionsOrigin)
	}

	if !m.GetCurrentUserDirectPermissionsMock.invocationsDone() && afterGetCurrentUserDirectPermissionsCounter > 0 {
		m.t.Errorf("Expected %d calls to AuthCoreMock.GetCurrentUserDirectPermissions at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetCurrentUserDirectPermissionsMock.expectedInvocations), m.GetCurrentUserDirectPermissionsMock.expectedInvocationsOrigin, afterGetCurrentUserDirectPermissionsCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AuthCoreMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetCurrentUserDirectPermissionsInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AuthCoreMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AuthCoreMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetCurrentUserDirectPermissionsDone()
}

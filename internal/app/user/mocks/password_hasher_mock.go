// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/66gu1/easygodocs/internal/app/user.PasswordHasher -o password_hasher_mock.go -n PasswordHasherMock -p mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// PasswordHasherMock implements mm_user.PasswordHasher
type PasswordHasherMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcHashPassword          func(password []byte, cost int) (ba1 []byte, err error)
	funcHashPasswordOrigin    string
	inspectFuncHashPassword   func(password []byte, cost int)
	afterHashPasswordCounter  uint64
	beforeHashPasswordCounter uint64
	HashPasswordMock          mPasswordHasherMockHashPassword
}

// NewPasswordHasherMock returns a mock for mm_user.PasswordHasher
func NewPasswordHasherMock(t minimock.Tester) *PasswordHasherMock {
	m := &PasswordHasherMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.HashPasswordMock = mPasswordHasherMockHashPassword{mock: m}
	m.HashPasswordMock.callArgs = []*PasswordHasherMockHashPasswordParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mPasswordHasherMockHashPassword struct {
	optional           bool
	mock               *PasswordHasherMock
	defaultExpectation *PasswordHasherMockHashPasswordExpectation
	expectations       []*PasswordHasherMockHashPasswordExpectation

	callArgs []*PasswordHasherMockHashPasswordParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// PasswordHasherMockHashPasswordExpectation specifies expectation struct of the PasswordHasher.HashPassword
type PasswordHasherMockHashPasswordExpectation struct {
	mock               *PasswordHasherMock
	params             *PasswordHasherMockHashPasswordParams
	paramPtrs          *PasswordHasherMockHashPasswordParamPtrs
	expectationOrigins PasswordHasherMockHashPasswordExpectationOrigins
	results            *PasswordHasherMockHashPasswordResults
	returnOrigin       string
	Counter            uint64
}

// PasswordHasherMockHashPasswordParams contains parameters of the PasswordHasher.HashPassword
type PasswordHasherMockHashPasswordParams struct {
	password []byte
	cost     int
}

// PasswordHasherMockHashPasswordParamPtrs contains pointers to parameters of the PasswordHasher.HashPassword
type PasswordHasherMockHashPasswordParamPtrs struct {
	password *[]byte
	cost     *int
}

// PasswordHasherMockHashPasswordResults contains results of the PasswordHasher.HashPassword
type PasswordHasherMockHashPasswordResults struct {
	ba1 []byte
	err error
}

// PasswordHasherMockHashPasswordOrigins contains origins of expectations of the PasswordHasher.HashPassword
type PasswordHasherMockHashPasswordExpectationOrigins struct {
	origin         string
	originPassword string
	originCost     string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmHashPassword *mPasswordHasherMockHashPassword) Optional() *mPasswordHasherMockHashPassword {
	mmHashPassword.optional = true
	return mmHashPassword
}

// Expect sets up expected params for PasswordHasher.HashPassword
func (mmHashPassword *mPasswordHasherMockHashPassword) Expect(password []byte, cost int) *mPasswordHasherMockHashPassword {
	if mmHashPassword.mock.funcHashPassword != nil {
		mmHashPassword.mock.t.Fatalf("PasswordHasherMock.HashPassword mock is already set by Set")
	}

	if mmHashPassword.defaultExpectation == nil {
		mmHashPassword.defaultExpectation = &PasswordHasherMockHashPasswordExpectation{}
	}

	if mmHashPassword.defaultExpectation.paramPtrs != nil {
		mmHashPassword.mock.t.Fatalf("PasswordHasherMock.HashPassword mock is already set by ExpectParams functions")
	}

	mmHashPassword.defaultExpectation.params = &PasswordHasherMockHashPasswordParams{password, cost}
	mmHashPassword.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmHashPassword.expectations {
		if minimock.Equal(e.params, mmHashPassword.defaultExpectation.params) {
			mmHashPassword.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmHashPassword.defaultExpectation.params)
		}
	}

	return mmHashPassword
}

// ExpectPasswordParam1 sets up expected param password for PasswordHasher.HashPassword
func (mmHashPassword *mPasswordHasherMockHashPassword) ExpectPasswordParam1(password []byte) *mPasswordHasherMockHashPassword {
	if mmHashPassword.mock.funcHashPassword != nil {
		mmHashPassword.mock.t.Fatalf("PasswordHasherMock.HashPassword mock is already set by Set")
	}

	if mmHashPassword.defaultExpectation == nil {
		mmHashPassword.defaultExpectation = &PasswordHasherMockHashPasswordExpectation{}
	}

	if mmHashPassword.defaultExpectation.params != nil {
		mmHashPassword.mock.t.Fatalf("PasswordHasherMock.HashPassword mock is already set by Expect")
	}

	if mmHashPassword.defaultExpectation.paramPtrs == nil {
		mmHashPassword.defaultExpectation.paramPtrs = &PasswordHasherMockHashPasswordParamPtrs{}
	}
	mmHashPassword.defaultExpectation.paramPtrs.password = &password
	mmHashPassword.defaultExpectation.expectationOrigins.originPassword = minimock.CallerInfo(1)

	return mmHashPassword
}

// ExpectCostParam2 sets up expected param cost for PasswordHasher.HashPassword
func (mmHashPassword *mPasswordHasherMockHashPassword) ExpectCostParam2(cost int) *mPasswordHasherMockHashPassword {
	if mmHashPassword.mock.funcHashPassword != nil {
		mmHashPassword.mock.t.Fatalf("PasswordHasherMock.HashPassword mock is already set by Set")
	}

	if mmHashPassword.defaultExpectation == nil {
		mmHashPassword.defaultExpectation = &PasswordHasherMockHashPasswordExpectation{}
	}

	if mmHashPassword.defaultExpectation.params != nil {
		mmHashPassword.mock.t.Fatalf("PasswordHasherMock.HashPassword mock is already set by Expect")
	}

	if mmHashPassword.defaultExpectation.paramPtrs == nil {
		mmHashPassword.defaultExpectation.paramPtrs = &PasswordHasherMockHashPasswordParamPtrs{}
	}
	mmHashPassword.defaultExpectation.paramPtrs.cost = &cost
	mmHashPassword.defaultExpectation.expectationOrigins.originCost = minimock.CallerInfo(1)

	return mmHashPassword
}

// Inspect accepts an inspector function that has same arguments as the PasswordHasher.HashPassword
func (mmHashPassword *mPasswordHasherMockHashPassword) Inspect(f func(password []byte, cost int)) *mPasswordHasherMockHashPassword {
	if mmHashPassword.mock.inspectFuncHashPassword != nil {
		mmHashPassword.mock.t.Fatalf("Inspect function is already set for PasswordHasherMock.HashPassword")
	}

	mmHashPassword.mock.inspectFuncHashPassword = f

	return mmHashPassword
}

// Return sets up results that will be returned by PasswordHasher.HashPassword
func (mmHashPassword *mPasswordHasherMockHashPassword) Return(ba1 []byte, err error) *PasswordHasherMock {
	if mmHashPassword.mock.funcHashPassword != nil {
		mmHashPassword.mock.t.Fatalf("PasswordHasherMock.HashPassword mock is already set by Set")
	}

	if mmHashPassword.defaultExpectation == nil {
		mmHashPassword.defaultExpectation = &PasswordHasherMockHashPasswordExpectation{mock: mmHashPassword.mock}
	}
	mmHashPassword.defaultExpectation.results = &PasswordHasherMockHashPasswordResults{ba1, err}
	mmHashPassword.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmHashPassword.mock
}

// Set uses given function f to mock the PasswordHasher.HashPassword method
func (mmHashPassword *mPasswordHasherMockHashPassword) Set(f func(password []byte, cost int) (ba1 []byte, err error)) *PasswordHasherMock {
	if mmHashPassword.defaultExpectation != nil {
		mmHashPassword.mock.t.Fatalf("Default expectation is already set for the PasswordHasher.HashPassword method")
	}

	if len(mmHashPassword.expectations) > 0 {
		mmHashPassword.mock.t.Fatalf("Some expectations are already set for the PasswordHasher.HashPassword method")
	}

	mmHashPassword.mock.funcHashPassword = f
	mmHashPassword.mock.funcHashPasswordOrigin = minimock.CallerInfo(1)
	return mmHashPassword.mock
}

// When sets expectation for the PasswordHasher.HashPassword which will trigger the result defined by the following
// Then helper
func (mmHashPassword *mPasswordHasherMockHashPassword) When(password []byte, cost int) *PasswordHasherMockHashPasswordExpectation {
	if mmHashPassword.mock.funcHashPassword != nil {
		mmHashPassword.mock.t.Fatalf("PasswordHasherMock.HashPassword mock is already set by Set")
	}

	expectation := &PasswordHasherMockHashPasswordExpectation{
		mock:               mmHashPassword.mock,
		params:             &PasswordHasherMockHashPasswordParams{password, cost},
		expectationOrigins: PasswordHasherMockHashPasswordExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmHashPassword.expectations = append(mmHashPassword.expectations, expectation)
	return expectation
}

// Then sets up PasswordHasher.HashPassword return parameters for the expectation previously defined by the When method
func (e *PasswordHasherMockHashPasswordExpectation) Then(ba1 []byte, err error) *PasswordHasherMock {
	e.results = &PasswordHasherMockHashPasswordResults{ba1, err}
	return e.mock
}

// Times sets number of times PasswordHasher.HashPassword should be invoked
func (mmHashPassword *mPasswordHasherMockHashPassword) Times(n uint64) *mPasswordHasherMockHashPassword {
	if n == 0 {
		mmHashPassword.mock.t.Fatalf("Times of PasswordHasherMock.HashPassword mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmHashPassword.expectedInvocations, n)
	mmHashPassword.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmHashPassword
}

func (mmHashPassword *mPasswordHasherMockHashPassword) invocationsDone() bool {
	if len(mmHashPassword.expectations) == 0 && mmHashPassword.defaultExpectation == nil && mmHashPassword.mock.funcHashPassword == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmHashPassword.mock.afterHashPasswordCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmHashPassword.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// HashPassword implements mm_user.PasswordHasher
func (mmHashPassword *PasswordHasherMock) HashPassword(password []byte, cost int) (ba1 []byte, err error) {
	mm_atomic.AddUint64(&mmHashPassword.beforeHashPasswordCounter, 1)
	defer mm_atomic.AddUint64(&mmHashPassword.afterHashPasswordCounter, 1)

	mmHashPassword.t.Helper()

	if mmHashPassword.inspectFuncHashPassword != nil {
		mmHashPassword.inspectFuncHashPassword(password, cost)
	}

	mm_params := PasswordHasherMockHashPasswordParams{password, cost}

	// Record call args
	mmHashPassword.HashPasswordMock.mutex.Lock()
	mmHashPassword.HashPasswordMock.callArgs = append(mmHashPassword.HashPasswordMock.callArgs, &mm_params)
	mmHashPassword.HashPasswordMock.mutex.Unlock()

	for _, e := range mmHashPassword.HashPasswordMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ba1, e.results.err
		}
	}

	if mmHashPassword.HashPasswordMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmHashPassword.HashPasswordMock.defaultExpectation.Counter, 1)
		mm_want := mmHashPassword.HashPasswordMock.defaultExpectation.params
		mm_want_ptrs := mmHashPassword.HashPasswordMock.defaultExpectation.paramPtrs

		mm_got := PasswordHasherMockHashPasswordParams{password, cost}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.password != nil && !minimock.Equal(*mm_want_ptrs.password, mm_got.password) {
				mmHashPassword.t.Errorf("PasswordHasherMock.HashPassword got unexpected parameter password, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmHashPassword.HashPasswordMock.defaultExpectation.expectationOrigins.originPassword, *mm_want_ptrs.password, mm_got.password, minimock.Diff(*mm_want_ptrs.password, mm_got.password))
			}

			if mm_want_ptrs.cost != nil && !minimock.Equal(*mm_want_ptrs.cost, mm_got.cost) {
				mmHashPassword.t.Errorf("PasswordHasherMock.HashPassword got unexpected parameter cost, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmHashPassword.HashPasswordMock.defaultExpectation.expectationOrigins.originCost, *mm_want_ptrs.cost, mm_got.cost, minimock.Diff(*mm_want_ptrs.cost, mm_got.cost))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmHashPassword.t.Errorf("PasswordHasherMock.HashPassword got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmHashPassword.HashPasswordMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmHashPassword.HashPasswordMock.defaultExpectation.results
		if mm_results == nil {
			mmHashPassword.t.Fatal("No results are set for the PasswordHasherMock.HashPassword")
		}
		return (*mm_results).ba1, (*mm_results).err
	}
	if mmHashPassword.funcHashPassword != nil {
		return mmHashPassword.funcHashPassword(password, cost)
	}
	mmHashPassword.t.Fatalf("Unexpected call to PasswordHasherMock.HashPassword. %v %v", password, cost)
	return
}

// HashPasswordAfterCounter returns a count of finished PasswordHasherMock.HashPassword invocations
func (mmHashPassword *PasswordHasherMock) HashPasswordAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHashPassword.afterHashPasswordCounter)
}

// HashPasswordBeforeCounter returns a count of PasswordHasherMock.HashPassword invocations
func (mmHashPassword *PasswordHasherMock) HashPasswordBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHashPassword.beforeHashPasswordCounter)
}

// Calls returns a list of arguments used in each call to PasswordHasherMock.HashPassword.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmHashPassword *mPasswordHasherMockHashPassword) Calls() []*PasswordHasherMockHashPasswordParams {
	mmHashPassword.mutex.RLock()

	argCopy := make([]*PasswordHasherMockHashPasswordParams, len(mmHashPassword.callArgs))
	copy(argCopy, mmHashPassword.callArgs)

	mmHashPassword.mutex.RUnlock()

	return argCopy
}

// MinimockHashPasswordDone returns true if the count of the HashPassword invocations corresponds
// the number of defined expectations
func (m *PasswordHasherMock) MinimockHashPasswordDone() bool {
	if m.HashPasswordMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.HashPasswordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.HashPasswordMock.invocationsDone()
}

// MinimockHashPasswordInspect logs each unmet expectation
func (m *PasswordHasherMock) MinimockHashPasswordInspect() {
	for _, e := range m.HashPasswordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PasswordHasherMock.HashPassword at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterHashPasswordCounter := mm_atomic.LoadUint64(&m.afterHashPasswordCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.HashPasswordMock.defaultExpectation != nil && afterHashPasswordCounter < 1 {
		if m.HashPasswordMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to PasswordHasherMock.HashPassword at\n%s", m.HashPasswordMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to PasswordHasherMock.HashPassword at\n%s with params: %#v", m.HashPasswordMock.defaultExpectation.expectationOrigins.origin, *m.HashPasswordMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcHashPassword != nil && afterHashPasswordCounter < 1 {
		m.t.Errorf("Expected call to PasswordHasherMock.HashPassword at\n%s", m.funcHashPasswordOrigin)
	}

	if !m.HashPasswordMock.invocationsDone() && afterHashPasswordCounter > 0 {
		m.t.Errorf("Expected %d calls to PasswordHasherMock.HashPassword at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.HashPasswordMock.expectedInvocations), m.HashPasswordMock.expectedInvocationsOrigin, afterHashPasswordCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PasswordHasherMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockHashPasswordInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PasswordHasherMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PasswordHasherMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockHashPasswordDone()
}

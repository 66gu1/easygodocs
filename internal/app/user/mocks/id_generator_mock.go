// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/66gu1/easygodocs/internal/app/user.IDGenerator -o id_generator_mock.go -n IDGeneratorMock -p mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/google/uuid"
)

// IDGeneratorMock implements mm_user.IDGenerator
type IDGeneratorMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcNew          func() (u1 uuid.UUID, err error)
	funcNewOrigin    string
	inspectFuncNew   func()
	afterNewCounter  uint64
	beforeNewCounter uint64
	NewMock          mIDGeneratorMockNew
}

// NewIDGeneratorMock returns a mock for mm_user.IDGenerator
func NewIDGeneratorMock(t minimock.Tester) *IDGeneratorMock {
	m := &IDGeneratorMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.NewMock = mIDGeneratorMockNew{mock: m}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mIDGeneratorMockNew struct {
	optional           bool
	mock               *IDGeneratorMock
	defaultExpectation *IDGeneratorMockNewExpectation
	expectations       []*IDGeneratorMockNewExpectation

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// IDGeneratorMockNewExpectation specifies expectation struct of the IDGenerator.New
type IDGeneratorMockNewExpectation struct {
	mock *IDGeneratorMock

	results      *IDGeneratorMockNewResults
	returnOrigin string
	Counter      uint64
}

// IDGeneratorMockNewResults contains results of the IDGenerator.New
type IDGeneratorMockNewResults struct {
	u1  uuid.UUID
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmNew *mIDGeneratorMockNew) Optional() *mIDGeneratorMockNew {
	mmNew.optional = true
	return mmNew
}

// Expect sets up expected params for IDGenerator.New
func (mmNew *mIDGeneratorMockNew) Expect() *mIDGeneratorMockNew {
	if mmNew.mock.funcNew != nil {
		mmNew.mock.t.Fatalf("IDGeneratorMock.New mock is already set by Set")
	}

	if mmNew.defaultExpectation == nil {
		mmNew.defaultExpectation = &IDGeneratorMockNewExpectation{}
	}

	return mmNew
}

// Inspect accepts an inspector function that has same arguments as the IDGenerator.New
func (mmNew *mIDGeneratorMockNew) Inspect(f func()) *mIDGeneratorMockNew {
	if mmNew.mock.inspectFuncNew != nil {
		mmNew.mock.t.Fatalf("Inspect function is already set for IDGeneratorMock.New")
	}

	mmNew.mock.inspectFuncNew = f

	return mmNew
}

// Return sets up results that will be returned by IDGenerator.New
func (mmNew *mIDGeneratorMockNew) Return(u1 uuid.UUID, err error) *IDGeneratorMock {
	if mmNew.mock.funcNew != nil {
		mmNew.mock.t.Fatalf("IDGeneratorMock.New mock is already set by Set")
	}

	if mmNew.defaultExpectation == nil {
		mmNew.defaultExpectation = &IDGeneratorMockNewExpectation{mock: mmNew.mock}
	}
	mmNew.defaultExpectation.results = &IDGeneratorMockNewResults{u1, err}
	mmNew.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmNew.mock
}

// Set uses given function f to mock the IDGenerator.New method
func (mmNew *mIDGeneratorMockNew) Set(f func() (u1 uuid.UUID, err error)) *IDGeneratorMock {
	if mmNew.defaultExpectation != nil {
		mmNew.mock.t.Fatalf("Default expectation is already set for the IDGenerator.New method")
	}

	if len(mmNew.expectations) > 0 {
		mmNew.mock.t.Fatalf("Some expectations are already set for the IDGenerator.New method")
	}

	mmNew.mock.funcNew = f
	mmNew.mock.funcNewOrigin = minimock.CallerInfo(1)
	return mmNew.mock
}

// Times sets number of times IDGenerator.New should be invoked
func (mmNew *mIDGeneratorMockNew) Times(n uint64) *mIDGeneratorMockNew {
	if n == 0 {
		mmNew.mock.t.Fatalf("Times of IDGeneratorMock.New mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmNew.expectedInvocations, n)
	mmNew.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmNew
}

func (mmNew *mIDGeneratorMockNew) invocationsDone() bool {
	if len(mmNew.expectations) == 0 && mmNew.defaultExpectation == nil && mmNew.mock.funcNew == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmNew.mock.afterNewCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmNew.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// New implements mm_user.IDGenerator
func (mmNew *IDGeneratorMock) New() (u1 uuid.UUID, err error) {
	mm_atomic.AddUint64(&mmNew.beforeNewCounter, 1)
	defer mm_atomic.AddUint64(&mmNew.afterNewCounter, 1)

	mmNew.t.Helper()

	if mmNew.inspectFuncNew != nil {
		mmNew.inspectFuncNew()
	}

	if mmNew.NewMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNew.NewMock.defaultExpectation.Counter, 1)

		mm_results := mmNew.NewMock.defaultExpectation.results
		if mm_results == nil {
			mmNew.t.Fatal("No results are set for the IDGeneratorMock.New")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmNew.funcNew != nil {
		return mmNew.funcNew()
	}
	mmNew.t.Fatalf("Unexpected call to IDGeneratorMock.New.")
	return
}

// NewAfterCounter returns a count of finished IDGeneratorMock.New invocations
func (mmNew *IDGeneratorMock) NewAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNew.afterNewCounter)
}

// NewBeforeCounter returns a count of IDGeneratorMock.New invocations
func (mmNew *IDGeneratorMock) NewBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNew.beforeNewCounter)
}

// MinimockNewDone returns true if the count of the New invocations corresponds
// the number of defined expectations
func (m *IDGeneratorMock) MinimockNewDone() bool {
	if m.NewMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.NewMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.NewMock.invocationsDone()
}

// MinimockNewInspect logs each unmet expectation
func (m *IDGeneratorMock) MinimockNewInspect() {
	for _, e := range m.NewMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to IDGeneratorMock.New")
		}
	}

	afterNewCounter := mm_atomic.LoadUint64(&m.afterNewCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.NewMock.defaultExpectation != nil && afterNewCounter < 1 {
		m.t.Errorf("Expected call to IDGeneratorMock.New at\n%s", m.NewMock.defaultExpectation.returnOrigin)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNew != nil && afterNewCounter < 1 {
		m.t.Errorf("Expected call to IDGeneratorMock.New at\n%s", m.funcNewOrigin)
	}

	if !m.NewMock.invocationsDone() && afterNewCounter > 0 {
		m.t.Errorf("Expected %d calls to IDGeneratorMock.New at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.NewMock.expectedInvocations), m.NewMock.expectedInvocationsOrigin, afterNewCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IDGeneratorMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockNewInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IDGeneratorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IDGeneratorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockNewDone()
}

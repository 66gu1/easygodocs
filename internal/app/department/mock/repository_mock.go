// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mock

//go:generate minimock -i github.com/66gu1/easygodocs/internal/app/department.Repository -o repository_mock.go -n RepositoryMock -p mock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	mm_department "github.com/66gu1/easygodocs/internal/app/department"
	"github.com/gojuno/minimock/v3"
	"github.com/google/uuid"
)

// RepositoryMock implements mm_department.Repository
type RepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreate          func(ctx context.Context, req mm_department.CreateDepartmentReq, id uuid.UUID) (err error)
	funcCreateOrigin    string
	inspectFuncCreate   func(ctx context.Context, req mm_department.CreateDepartmentReq, id uuid.UUID)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mRepositoryMockCreate

	funcDelete          func(ctx context.Context, id uuid.UUID) (err error)
	funcDeleteOrigin    string
	inspectFuncDelete   func(ctx context.Context, id uuid.UUID)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mRepositoryMockDelete

	funcList          func(ctx context.Context) (da1 []mm_department.Department, err error)
	funcListOrigin    string
	inspectFuncList   func(ctx context.Context)
	afterListCounter  uint64
	beforeListCounter uint64
	ListMock          mRepositoryMockList

	funcUpdate          func(ctx context.Context, req mm_department.UpdateDepartmentReq) (err error)
	funcUpdateOrigin    string
	inspectFuncUpdate   func(ctx context.Context, req mm_department.UpdateDepartmentReq)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mRepositoryMockUpdate

	funcValidateParent          func(ctx context.Context, id uuid.UUID, parentID uuid.UUID) (err error)
	funcValidateParentOrigin    string
	inspectFuncValidateParent   func(ctx context.Context, id uuid.UUID, parentID uuid.UUID)
	afterValidateParentCounter  uint64
	beforeValidateParentCounter uint64
	ValidateParentMock          mRepositoryMockValidateParent
}

// NewRepositoryMock returns a mock for mm_department.Repository
func NewRepositoryMock(t minimock.Tester) *RepositoryMock {
	m := &RepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mRepositoryMockCreate{mock: m}
	m.CreateMock.callArgs = []*RepositoryMockCreateParams{}

	m.DeleteMock = mRepositoryMockDelete{mock: m}
	m.DeleteMock.callArgs = []*RepositoryMockDeleteParams{}

	m.ListMock = mRepositoryMockList{mock: m}
	m.ListMock.callArgs = []*RepositoryMockListParams{}

	m.UpdateMock = mRepositoryMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*RepositoryMockUpdateParams{}

	m.ValidateParentMock = mRepositoryMockValidateParent{mock: m}
	m.ValidateParentMock.callArgs = []*RepositoryMockValidateParentParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mRepositoryMockCreate struct {
	optional           bool
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockCreateExpectation
	expectations       []*RepositoryMockCreateExpectation

	callArgs []*RepositoryMockCreateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// RepositoryMockCreateExpectation specifies expectation struct of the Repository.Create
type RepositoryMockCreateExpectation struct {
	mock               *RepositoryMock
	params             *RepositoryMockCreateParams
	paramPtrs          *RepositoryMockCreateParamPtrs
	expectationOrigins RepositoryMockCreateExpectationOrigins
	results            *RepositoryMockCreateResults
	returnOrigin       string
	Counter            uint64
}

// RepositoryMockCreateParams contains parameters of the Repository.Create
type RepositoryMockCreateParams struct {
	ctx context.Context
	req mm_department.CreateDepartmentReq
	id  uuid.UUID
}

// RepositoryMockCreateParamPtrs contains pointers to parameters of the Repository.Create
type RepositoryMockCreateParamPtrs struct {
	ctx *context.Context
	req *mm_department.CreateDepartmentReq
	id  *uuid.UUID
}

// RepositoryMockCreateResults contains results of the Repository.Create
type RepositoryMockCreateResults struct {
	err error
}

// RepositoryMockCreateOrigins contains origins of expectations of the Repository.Create
type RepositoryMockCreateExpectationOrigins struct {
	origin    string
	originCtx string
	originReq string
	originId  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreate *mRepositoryMockCreate) Optional() *mRepositoryMockCreate {
	mmCreate.optional = true
	return mmCreate
}

// Expect sets up expected params for Repository.Create
func (mmCreate *mRepositoryMockCreate) Expect(ctx context.Context, req mm_department.CreateDepartmentReq, id uuid.UUID) *mRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("RepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &RepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.paramPtrs != nil {
		mmCreate.mock.t.Fatalf("RepositoryMock.Create mock is already set by ExpectParams functions")
	}

	mmCreate.defaultExpectation.params = &RepositoryMockCreateParams{ctx, req, id}
	mmCreate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// ExpectCtxParam1 sets up expected param ctx for Repository.Create
func (mmCreate *mRepositoryMockCreate) ExpectCtxParam1(ctx context.Context) *mRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("RepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &RepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("RepositoryMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &RepositoryMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreate.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreate
}

// ExpectReqParam2 sets up expected param req for Repository.Create
func (mmCreate *mRepositoryMockCreate) ExpectReqParam2(req mm_department.CreateDepartmentReq) *mRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("RepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &RepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("RepositoryMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &RepositoryMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.req = &req
	mmCreate.defaultExpectation.expectationOrigins.originReq = minimock.CallerInfo(1)

	return mmCreate
}

// ExpectIdParam3 sets up expected param id for Repository.Create
func (mmCreate *mRepositoryMockCreate) ExpectIdParam3(id uuid.UUID) *mRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("RepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &RepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("RepositoryMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &RepositoryMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.id = &id
	mmCreate.defaultExpectation.expectationOrigins.originId = minimock.CallerInfo(1)

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the Repository.Create
func (mmCreate *mRepositoryMockCreate) Inspect(f func(ctx context.Context, req mm_department.CreateDepartmentReq, id uuid.UUID)) *mRepositoryMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for RepositoryMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by Repository.Create
func (mmCreate *mRepositoryMockCreate) Return(err error) *RepositoryMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("RepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &RepositoryMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &RepositoryMockCreateResults{err}
	mmCreate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreate.mock
}

// Set uses given function f to mock the Repository.Create method
func (mmCreate *mRepositoryMockCreate) Set(f func(ctx context.Context, req mm_department.CreateDepartmentReq, id uuid.UUID) (err error)) *RepositoryMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the Repository.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the Repository.Create method")
	}

	mmCreate.mock.funcCreate = f
	mmCreate.mock.funcCreateOrigin = minimock.CallerInfo(1)
	return mmCreate.mock
}

// When sets expectation for the Repository.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mRepositoryMockCreate) When(ctx context.Context, req mm_department.CreateDepartmentReq, id uuid.UUID) *RepositoryMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("RepositoryMock.Create mock is already set by Set")
	}

	expectation := &RepositoryMockCreateExpectation{
		mock:               mmCreate.mock,
		params:             &RepositoryMockCreateParams{ctx, req, id},
		expectationOrigins: RepositoryMockCreateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up Repository.Create return parameters for the expectation previously defined by the When method
func (e *RepositoryMockCreateExpectation) Then(err error) *RepositoryMock {
	e.results = &RepositoryMockCreateResults{err}
	return e.mock
}

// Times sets number of times Repository.Create should be invoked
func (mmCreate *mRepositoryMockCreate) Times(n uint64) *mRepositoryMockCreate {
	if n == 0 {
		mmCreate.mock.t.Fatalf("Times of RepositoryMock.Create mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreate.expectedInvocations, n)
	mmCreate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreate
}

func (mmCreate *mRepositoryMockCreate) invocationsDone() bool {
	if len(mmCreate.expectations) == 0 && mmCreate.defaultExpectation == nil && mmCreate.mock.funcCreate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreate.mock.afterCreateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Create implements mm_department.Repository
func (mmCreate *RepositoryMock) Create(ctx context.Context, req mm_department.CreateDepartmentReq, id uuid.UUID) (err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	mmCreate.t.Helper()

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, req, id)
	}

	mm_params := RepositoryMockCreateParams{ctx, req, id}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, &mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_want_ptrs := mmCreate.CreateMock.defaultExpectation.paramPtrs

		mm_got := RepositoryMockCreateParams{ctx, req, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreate.t.Errorf("RepositoryMock.Create got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreate.CreateMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.req != nil && !minimock.Equal(*mm_want_ptrs.req, mm_got.req) {
				mmCreate.t.Errorf("RepositoryMock.Create got unexpected parameter req, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreate.CreateMock.defaultExpectation.expectationOrigins.originReq, *mm_want_ptrs.req, mm_got.req, minimock.Diff(*mm_want_ptrs.req, mm_got.req))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmCreate.t.Errorf("RepositoryMock.Create got unexpected parameter id, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreate.CreateMock.defaultExpectation.expectationOrigins.originId, *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("RepositoryMock.Create got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreate.CreateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the RepositoryMock.Create")
		}
		return (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, req, id)
	}
	mmCreate.t.Fatalf("Unexpected call to RepositoryMock.Create. %v %v %v", ctx, req, id)
	return
}

// CreateAfterCounter returns a count of finished RepositoryMock.Create invocations
func (mmCreate *RepositoryMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of RepositoryMock.Create invocations
func (mmCreate *RepositoryMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mRepositoryMockCreate) Calls() []*RepositoryMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*RepositoryMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockCreateDone() bool {
	if m.CreateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateMock.invocationsDone()
}

// MinimockCreateInspect logs each unmet expectation
func (m *RepositoryMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.Create at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateCounter := mm_atomic.LoadUint64(&m.afterCreateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && afterCreateCounter < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to RepositoryMock.Create at\n%s", m.CreateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to RepositoryMock.Create at\n%s with params: %#v", m.CreateMock.defaultExpectation.expectationOrigins.origin, *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && afterCreateCounter < 1 {
		m.t.Errorf("Expected call to RepositoryMock.Create at\n%s", m.funcCreateOrigin)
	}

	if !m.CreateMock.invocationsDone() && afterCreateCounter > 0 {
		m.t.Errorf("Expected %d calls to RepositoryMock.Create at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateMock.expectedInvocations), m.CreateMock.expectedInvocationsOrigin, afterCreateCounter)
	}
}

type mRepositoryMockDelete struct {
	optional           bool
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockDeleteExpectation
	expectations       []*RepositoryMockDeleteExpectation

	callArgs []*RepositoryMockDeleteParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// RepositoryMockDeleteExpectation specifies expectation struct of the Repository.Delete
type RepositoryMockDeleteExpectation struct {
	mock               *RepositoryMock
	params             *RepositoryMockDeleteParams
	paramPtrs          *RepositoryMockDeleteParamPtrs
	expectationOrigins RepositoryMockDeleteExpectationOrigins
	results            *RepositoryMockDeleteResults
	returnOrigin       string
	Counter            uint64
}

// RepositoryMockDeleteParams contains parameters of the Repository.Delete
type RepositoryMockDeleteParams struct {
	ctx context.Context
	id  uuid.UUID
}

// RepositoryMockDeleteParamPtrs contains pointers to parameters of the Repository.Delete
type RepositoryMockDeleteParamPtrs struct {
	ctx *context.Context
	id  *uuid.UUID
}

// RepositoryMockDeleteResults contains results of the Repository.Delete
type RepositoryMockDeleteResults struct {
	err error
}

// RepositoryMockDeleteOrigins contains origins of expectations of the Repository.Delete
type RepositoryMockDeleteExpectationOrigins struct {
	origin    string
	originCtx string
	originId  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDelete *mRepositoryMockDelete) Optional() *mRepositoryMockDelete {
	mmDelete.optional = true
	return mmDelete
}

// Expect sets up expected params for Repository.Delete
func (mmDelete *mRepositoryMockDelete) Expect(ctx context.Context, id uuid.UUID) *mRepositoryMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("RepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &RepositoryMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.paramPtrs != nil {
		mmDelete.mock.t.Fatalf("RepositoryMock.Delete mock is already set by ExpectParams functions")
	}

	mmDelete.defaultExpectation.params = &RepositoryMockDeleteParams{ctx, id}
	mmDelete.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// ExpectCtxParam1 sets up expected param ctx for Repository.Delete
func (mmDelete *mRepositoryMockDelete) ExpectCtxParam1(ctx context.Context) *mRepositoryMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("RepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &RepositoryMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("RepositoryMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &RepositoryMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.ctx = &ctx
	mmDelete.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDelete
}

// ExpectIdParam2 sets up expected param id for Repository.Delete
func (mmDelete *mRepositoryMockDelete) ExpectIdParam2(id uuid.UUID) *mRepositoryMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("RepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &RepositoryMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("RepositoryMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &RepositoryMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.id = &id
	mmDelete.defaultExpectation.expectationOrigins.originId = minimock.CallerInfo(1)

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the Repository.Delete
func (mmDelete *mRepositoryMockDelete) Inspect(f func(ctx context.Context, id uuid.UUID)) *mRepositoryMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for RepositoryMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by Repository.Delete
func (mmDelete *mRepositoryMockDelete) Return(err error) *RepositoryMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("RepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &RepositoryMockDeleteExpectation{mock: mmDelete.mock}
	}
	mmDelete.defaultExpectation.results = &RepositoryMockDeleteResults{err}
	mmDelete.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDelete.mock
}

// Set uses given function f to mock the Repository.Delete method
func (mmDelete *mRepositoryMockDelete) Set(f func(ctx context.Context, id uuid.UUID) (err error)) *RepositoryMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the Repository.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the Repository.Delete method")
	}

	mmDelete.mock.funcDelete = f
	mmDelete.mock.funcDeleteOrigin = minimock.CallerInfo(1)
	return mmDelete.mock
}

// When sets expectation for the Repository.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mRepositoryMockDelete) When(ctx context.Context, id uuid.UUID) *RepositoryMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("RepositoryMock.Delete mock is already set by Set")
	}

	expectation := &RepositoryMockDeleteExpectation{
		mock:               mmDelete.mock,
		params:             &RepositoryMockDeleteParams{ctx, id},
		expectationOrigins: RepositoryMockDeleteExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up Repository.Delete return parameters for the expectation previously defined by the When method
func (e *RepositoryMockDeleteExpectation) Then(err error) *RepositoryMock {
	e.results = &RepositoryMockDeleteResults{err}
	return e.mock
}

// Times sets number of times Repository.Delete should be invoked
func (mmDelete *mRepositoryMockDelete) Times(n uint64) *mRepositoryMockDelete {
	if n == 0 {
		mmDelete.mock.t.Fatalf("Times of RepositoryMock.Delete mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDelete.expectedInvocations, n)
	mmDelete.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDelete
}

func (mmDelete *mRepositoryMockDelete) invocationsDone() bool {
	if len(mmDelete.expectations) == 0 && mmDelete.defaultExpectation == nil && mmDelete.mock.funcDelete == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDelete.mock.afterDeleteCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDelete.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Delete implements mm_department.Repository
func (mmDelete *RepositoryMock) Delete(ctx context.Context, id uuid.UUID) (err error) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	mmDelete.t.Helper()

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(ctx, id)
	}

	mm_params := RepositoryMockDeleteParams{ctx, id}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, &mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_want_ptrs := mmDelete.DeleteMock.defaultExpectation.paramPtrs

		mm_got := RepositoryMockDeleteParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDelete.t.Errorf("RepositoryMock.Delete got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDelete.DeleteMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmDelete.t.Errorf("RepositoryMock.Delete got unexpected parameter id, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDelete.DeleteMock.defaultExpectation.expectationOrigins.originId, *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("RepositoryMock.Delete got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDelete.DeleteMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDelete.DeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmDelete.t.Fatal("No results are set for the RepositoryMock.Delete")
		}
		return (*mm_results).err
	}
	if mmDelete.funcDelete != nil {
		return mmDelete.funcDelete(ctx, id)
	}
	mmDelete.t.Fatalf("Unexpected call to RepositoryMock.Delete. %v %v", ctx, id)
	return
}

// DeleteAfterCounter returns a count of finished RepositoryMock.Delete invocations
func (mmDelete *RepositoryMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of RepositoryMock.Delete invocations
func (mmDelete *RepositoryMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mRepositoryMockDelete) Calls() []*RepositoryMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*RepositoryMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockDeleteDone() bool {
	if m.DeleteMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteMock.invocationsDone()
}

// MinimockDeleteInspect logs each unmet expectation
func (m *RepositoryMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.Delete at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteCounter := mm_atomic.LoadUint64(&m.afterDeleteCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && afterDeleteCounter < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to RepositoryMock.Delete at\n%s", m.DeleteMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to RepositoryMock.Delete at\n%s with params: %#v", m.DeleteMock.defaultExpectation.expectationOrigins.origin, *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && afterDeleteCounter < 1 {
		m.t.Errorf("Expected call to RepositoryMock.Delete at\n%s", m.funcDeleteOrigin)
	}

	if !m.DeleteMock.invocationsDone() && afterDeleteCounter > 0 {
		m.t.Errorf("Expected %d calls to RepositoryMock.Delete at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteMock.expectedInvocations), m.DeleteMock.expectedInvocationsOrigin, afterDeleteCounter)
	}
}

type mRepositoryMockList struct {
	optional           bool
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockListExpectation
	expectations       []*RepositoryMockListExpectation

	callArgs []*RepositoryMockListParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// RepositoryMockListExpectation specifies expectation struct of the Repository.List
type RepositoryMockListExpectation struct {
	mock               *RepositoryMock
	params             *RepositoryMockListParams
	paramPtrs          *RepositoryMockListParamPtrs
	expectationOrigins RepositoryMockListExpectationOrigins
	results            *RepositoryMockListResults
	returnOrigin       string
	Counter            uint64
}

// RepositoryMockListParams contains parameters of the Repository.List
type RepositoryMockListParams struct {
	ctx context.Context
}

// RepositoryMockListParamPtrs contains pointers to parameters of the Repository.List
type RepositoryMockListParamPtrs struct {
	ctx *context.Context
}

// RepositoryMockListResults contains results of the Repository.List
type RepositoryMockListResults struct {
	da1 []mm_department.Department
	err error
}

// RepositoryMockListOrigins contains origins of expectations of the Repository.List
type RepositoryMockListExpectationOrigins struct {
	origin    string
	originCtx string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmList *mRepositoryMockList) Optional() *mRepositoryMockList {
	mmList.optional = true
	return mmList
}

// Expect sets up expected params for Repository.List
func (mmList *mRepositoryMockList) Expect(ctx context.Context) *mRepositoryMockList {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("RepositoryMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &RepositoryMockListExpectation{}
	}

	if mmList.defaultExpectation.paramPtrs != nil {
		mmList.mock.t.Fatalf("RepositoryMock.List mock is already set by ExpectParams functions")
	}

	mmList.defaultExpectation.params = &RepositoryMockListParams{ctx}
	mmList.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmList.expectations {
		if minimock.Equal(e.params, mmList.defaultExpectation.params) {
			mmList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmList.defaultExpectation.params)
		}
	}

	return mmList
}

// ExpectCtxParam1 sets up expected param ctx for Repository.List
func (mmList *mRepositoryMockList) ExpectCtxParam1(ctx context.Context) *mRepositoryMockList {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("RepositoryMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &RepositoryMockListExpectation{}
	}

	if mmList.defaultExpectation.params != nil {
		mmList.mock.t.Fatalf("RepositoryMock.List mock is already set by Expect")
	}

	if mmList.defaultExpectation.paramPtrs == nil {
		mmList.defaultExpectation.paramPtrs = &RepositoryMockListParamPtrs{}
	}
	mmList.defaultExpectation.paramPtrs.ctx = &ctx
	mmList.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmList
}

// Inspect accepts an inspector function that has same arguments as the Repository.List
func (mmList *mRepositoryMockList) Inspect(f func(ctx context.Context)) *mRepositoryMockList {
	if mmList.mock.inspectFuncList != nil {
		mmList.mock.t.Fatalf("Inspect function is already set for RepositoryMock.List")
	}

	mmList.mock.inspectFuncList = f

	return mmList
}

// Return sets up results that will be returned by Repository.List
func (mmList *mRepositoryMockList) Return(da1 []mm_department.Department, err error) *RepositoryMock {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("RepositoryMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &RepositoryMockListExpectation{mock: mmList.mock}
	}
	mmList.defaultExpectation.results = &RepositoryMockListResults{da1, err}
	mmList.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmList.mock
}

// Set uses given function f to mock the Repository.List method
func (mmList *mRepositoryMockList) Set(f func(ctx context.Context) (da1 []mm_department.Department, err error)) *RepositoryMock {
	if mmList.defaultExpectation != nil {
		mmList.mock.t.Fatalf("Default expectation is already set for the Repository.List method")
	}

	if len(mmList.expectations) > 0 {
		mmList.mock.t.Fatalf("Some expectations are already set for the Repository.List method")
	}

	mmList.mock.funcList = f
	mmList.mock.funcListOrigin = minimock.CallerInfo(1)
	return mmList.mock
}

// When sets expectation for the Repository.List which will trigger the result defined by the following
// Then helper
func (mmList *mRepositoryMockList) When(ctx context.Context) *RepositoryMockListExpectation {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("RepositoryMock.List mock is already set by Set")
	}

	expectation := &RepositoryMockListExpectation{
		mock:               mmList.mock,
		params:             &RepositoryMockListParams{ctx},
		expectationOrigins: RepositoryMockListExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmList.expectations = append(mmList.expectations, expectation)
	return expectation
}

// Then sets up Repository.List return parameters for the expectation previously defined by the When method
func (e *RepositoryMockListExpectation) Then(da1 []mm_department.Department, err error) *RepositoryMock {
	e.results = &RepositoryMockListResults{da1, err}
	return e.mock
}

// Times sets number of times Repository.List should be invoked
func (mmList *mRepositoryMockList) Times(n uint64) *mRepositoryMockList {
	if n == 0 {
		mmList.mock.t.Fatalf("Times of RepositoryMock.List mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmList.expectedInvocations, n)
	mmList.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmList
}

func (mmList *mRepositoryMockList) invocationsDone() bool {
	if len(mmList.expectations) == 0 && mmList.defaultExpectation == nil && mmList.mock.funcList == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmList.mock.afterListCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmList.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// List implements mm_department.Repository
func (mmList *RepositoryMock) List(ctx context.Context) (da1 []mm_department.Department, err error) {
	mm_atomic.AddUint64(&mmList.beforeListCounter, 1)
	defer mm_atomic.AddUint64(&mmList.afterListCounter, 1)

	mmList.t.Helper()

	if mmList.inspectFuncList != nil {
		mmList.inspectFuncList(ctx)
	}

	mm_params := RepositoryMockListParams{ctx}

	// Record call args
	mmList.ListMock.mutex.Lock()
	mmList.ListMock.callArgs = append(mmList.ListMock.callArgs, &mm_params)
	mmList.ListMock.mutex.Unlock()

	for _, e := range mmList.ListMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.da1, e.results.err
		}
	}

	if mmList.ListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmList.ListMock.defaultExpectation.Counter, 1)
		mm_want := mmList.ListMock.defaultExpectation.params
		mm_want_ptrs := mmList.ListMock.defaultExpectation.paramPtrs

		mm_got := RepositoryMockListParams{ctx}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmList.t.Errorf("RepositoryMock.List got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmList.ListMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmList.t.Errorf("RepositoryMock.List got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmList.ListMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmList.ListMock.defaultExpectation.results
		if mm_results == nil {
			mmList.t.Fatal("No results are set for the RepositoryMock.List")
		}
		return (*mm_results).da1, (*mm_results).err
	}
	if mmList.funcList != nil {
		return mmList.funcList(ctx)
	}
	mmList.t.Fatalf("Unexpected call to RepositoryMock.List. %v", ctx)
	return
}

// ListAfterCounter returns a count of finished RepositoryMock.List invocations
func (mmList *RepositoryMock) ListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmList.afterListCounter)
}

// ListBeforeCounter returns a count of RepositoryMock.List invocations
func (mmList *RepositoryMock) ListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmList.beforeListCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.List.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmList *mRepositoryMockList) Calls() []*RepositoryMockListParams {
	mmList.mutex.RLock()

	argCopy := make([]*RepositoryMockListParams, len(mmList.callArgs))
	copy(argCopy, mmList.callArgs)

	mmList.mutex.RUnlock()

	return argCopy
}

// MinimockListDone returns true if the count of the List invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockListDone() bool {
	if m.ListMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ListMock.invocationsDone()
}

// MinimockListInspect logs each unmet expectation
func (m *RepositoryMock) MinimockListInspect() {
	for _, e := range m.ListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.List at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterListCounter := mm_atomic.LoadUint64(&m.afterListCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ListMock.defaultExpectation != nil && afterListCounter < 1 {
		if m.ListMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to RepositoryMock.List at\n%s", m.ListMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to RepositoryMock.List at\n%s with params: %#v", m.ListMock.defaultExpectation.expectationOrigins.origin, *m.ListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcList != nil && afterListCounter < 1 {
		m.t.Errorf("Expected call to RepositoryMock.List at\n%s", m.funcListOrigin)
	}

	if !m.ListMock.invocationsDone() && afterListCounter > 0 {
		m.t.Errorf("Expected %d calls to RepositoryMock.List at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ListMock.expectedInvocations), m.ListMock.expectedInvocationsOrigin, afterListCounter)
	}
}

type mRepositoryMockUpdate struct {
	optional           bool
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockUpdateExpectation
	expectations       []*RepositoryMockUpdateExpectation

	callArgs []*RepositoryMockUpdateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// RepositoryMockUpdateExpectation specifies expectation struct of the Repository.Update
type RepositoryMockUpdateExpectation struct {
	mock               *RepositoryMock
	params             *RepositoryMockUpdateParams
	paramPtrs          *RepositoryMockUpdateParamPtrs
	expectationOrigins RepositoryMockUpdateExpectationOrigins
	results            *RepositoryMockUpdateResults
	returnOrigin       string
	Counter            uint64
}

// RepositoryMockUpdateParams contains parameters of the Repository.Update
type RepositoryMockUpdateParams struct {
	ctx context.Context
	req mm_department.UpdateDepartmentReq
}

// RepositoryMockUpdateParamPtrs contains pointers to parameters of the Repository.Update
type RepositoryMockUpdateParamPtrs struct {
	ctx *context.Context
	req *mm_department.UpdateDepartmentReq
}

// RepositoryMockUpdateResults contains results of the Repository.Update
type RepositoryMockUpdateResults struct {
	err error
}

// RepositoryMockUpdateOrigins contains origins of expectations of the Repository.Update
type RepositoryMockUpdateExpectationOrigins struct {
	origin    string
	originCtx string
	originReq string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdate *mRepositoryMockUpdate) Optional() *mRepositoryMockUpdate {
	mmUpdate.optional = true
	return mmUpdate
}

// Expect sets up expected params for Repository.Update
func (mmUpdate *mRepositoryMockUpdate) Expect(ctx context.Context, req mm_department.UpdateDepartmentReq) *mRepositoryMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("RepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &RepositoryMockUpdateExpectation{}
	}

	if mmUpdate.defaultExpectation.paramPtrs != nil {
		mmUpdate.mock.t.Fatalf("RepositoryMock.Update mock is already set by ExpectParams functions")
	}

	mmUpdate.defaultExpectation.params = &RepositoryMockUpdateParams{ctx, req}
	mmUpdate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// ExpectCtxParam1 sets up expected param ctx for Repository.Update
func (mmUpdate *mRepositoryMockUpdate) ExpectCtxParam1(ctx context.Context) *mRepositoryMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("RepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &RepositoryMockUpdateExpectation{}
	}

	if mmUpdate.defaultExpectation.params != nil {
		mmUpdate.mock.t.Fatalf("RepositoryMock.Update mock is already set by Expect")
	}

	if mmUpdate.defaultExpectation.paramPtrs == nil {
		mmUpdate.defaultExpectation.paramPtrs = &RepositoryMockUpdateParamPtrs{}
	}
	mmUpdate.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdate.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdate
}

// ExpectReqParam2 sets up expected param req for Repository.Update
func (mmUpdate *mRepositoryMockUpdate) ExpectReqParam2(req mm_department.UpdateDepartmentReq) *mRepositoryMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("RepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &RepositoryMockUpdateExpectation{}
	}

	if mmUpdate.defaultExpectation.params != nil {
		mmUpdate.mock.t.Fatalf("RepositoryMock.Update mock is already set by Expect")
	}

	if mmUpdate.defaultExpectation.paramPtrs == nil {
		mmUpdate.defaultExpectation.paramPtrs = &RepositoryMockUpdateParamPtrs{}
	}
	mmUpdate.defaultExpectation.paramPtrs.req = &req
	mmUpdate.defaultExpectation.expectationOrigins.originReq = minimock.CallerInfo(1)

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the Repository.Update
func (mmUpdate *mRepositoryMockUpdate) Inspect(f func(ctx context.Context, req mm_department.UpdateDepartmentReq)) *mRepositoryMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for RepositoryMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by Repository.Update
func (mmUpdate *mRepositoryMockUpdate) Return(err error) *RepositoryMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("RepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &RepositoryMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &RepositoryMockUpdateResults{err}
	mmUpdate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdate.mock
}

// Set uses given function f to mock the Repository.Update method
func (mmUpdate *mRepositoryMockUpdate) Set(f func(ctx context.Context, req mm_department.UpdateDepartmentReq) (err error)) *RepositoryMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the Repository.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the Repository.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	mmUpdate.mock.funcUpdateOrigin = minimock.CallerInfo(1)
	return mmUpdate.mock
}

// When sets expectation for the Repository.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mRepositoryMockUpdate) When(ctx context.Context, req mm_department.UpdateDepartmentReq) *RepositoryMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("RepositoryMock.Update mock is already set by Set")
	}

	expectation := &RepositoryMockUpdateExpectation{
		mock:               mmUpdate.mock,
		params:             &RepositoryMockUpdateParams{ctx, req},
		expectationOrigins: RepositoryMockUpdateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up Repository.Update return parameters for the expectation previously defined by the When method
func (e *RepositoryMockUpdateExpectation) Then(err error) *RepositoryMock {
	e.results = &RepositoryMockUpdateResults{err}
	return e.mock
}

// Times sets number of times Repository.Update should be invoked
func (mmUpdate *mRepositoryMockUpdate) Times(n uint64) *mRepositoryMockUpdate {
	if n == 0 {
		mmUpdate.mock.t.Fatalf("Times of RepositoryMock.Update mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdate.expectedInvocations, n)
	mmUpdate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdate
}

func (mmUpdate *mRepositoryMockUpdate) invocationsDone() bool {
	if len(mmUpdate.expectations) == 0 && mmUpdate.defaultExpectation == nil && mmUpdate.mock.funcUpdate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdate.mock.afterUpdateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Update implements mm_department.Repository
func (mmUpdate *RepositoryMock) Update(ctx context.Context, req mm_department.UpdateDepartmentReq) (err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	mmUpdate.t.Helper()

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, req)
	}

	mm_params := RepositoryMockUpdateParams{ctx, req}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, &mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_want_ptrs := mmUpdate.UpdateMock.defaultExpectation.paramPtrs

		mm_got := RepositoryMockUpdateParams{ctx, req}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdate.t.Errorf("RepositoryMock.Update got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdate.UpdateMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.req != nil && !minimock.Equal(*mm_want_ptrs.req, mm_got.req) {
				mmUpdate.t.Errorf("RepositoryMock.Update got unexpected parameter req, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdate.UpdateMock.defaultExpectation.expectationOrigins.originReq, *mm_want_ptrs.req, mm_got.req, minimock.Diff(*mm_want_ptrs.req, mm_got.req))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("RepositoryMock.Update got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdate.UpdateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the RepositoryMock.Update")
		}
		return (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, req)
	}
	mmUpdate.t.Fatalf("Unexpected call to RepositoryMock.Update. %v %v", ctx, req)
	return
}

// UpdateAfterCounter returns a count of finished RepositoryMock.Update invocations
func (mmUpdate *RepositoryMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of RepositoryMock.Update invocations
func (mmUpdate *RepositoryMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mRepositoryMockUpdate) Calls() []*RepositoryMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*RepositoryMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockUpdateDone() bool {
	if m.UpdateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateMock.invocationsDone()
}

// MinimockUpdateInspect logs each unmet expectation
func (m *RepositoryMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.Update at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateCounter := mm_atomic.LoadUint64(&m.afterUpdateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && afterUpdateCounter < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to RepositoryMock.Update at\n%s", m.UpdateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to RepositoryMock.Update at\n%s with params: %#v", m.UpdateMock.defaultExpectation.expectationOrigins.origin, *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && afterUpdateCounter < 1 {
		m.t.Errorf("Expected call to RepositoryMock.Update at\n%s", m.funcUpdateOrigin)
	}

	if !m.UpdateMock.invocationsDone() && afterUpdateCounter > 0 {
		m.t.Errorf("Expected %d calls to RepositoryMock.Update at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateMock.expectedInvocations), m.UpdateMock.expectedInvocationsOrigin, afterUpdateCounter)
	}
}

type mRepositoryMockValidateParent struct {
	optional           bool
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockValidateParentExpectation
	expectations       []*RepositoryMockValidateParentExpectation

	callArgs []*RepositoryMockValidateParentParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// RepositoryMockValidateParentExpectation specifies expectation struct of the Repository.ValidateParent
type RepositoryMockValidateParentExpectation struct {
	mock               *RepositoryMock
	params             *RepositoryMockValidateParentParams
	paramPtrs          *RepositoryMockValidateParentParamPtrs
	expectationOrigins RepositoryMockValidateParentExpectationOrigins
	results            *RepositoryMockValidateParentResults
	returnOrigin       string
	Counter            uint64
}

// RepositoryMockValidateParentParams contains parameters of the Repository.ValidateParent
type RepositoryMockValidateParentParams struct {
	ctx      context.Context
	id       uuid.UUID
	parentID uuid.UUID
}

// RepositoryMockValidateParentParamPtrs contains pointers to parameters of the Repository.ValidateParent
type RepositoryMockValidateParentParamPtrs struct {
	ctx      *context.Context
	id       *uuid.UUID
	parentID *uuid.UUID
}

// RepositoryMockValidateParentResults contains results of the Repository.ValidateParent
type RepositoryMockValidateParentResults struct {
	err error
}

// RepositoryMockValidateParentOrigins contains origins of expectations of the Repository.ValidateParent
type RepositoryMockValidateParentExpectationOrigins struct {
	origin         string
	originCtx      string
	originId       string
	originParentID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmValidateParent *mRepositoryMockValidateParent) Optional() *mRepositoryMockValidateParent {
	mmValidateParent.optional = true
	return mmValidateParent
}

// Expect sets up expected params for Repository.ValidateParent
func (mmValidateParent *mRepositoryMockValidateParent) Expect(ctx context.Context, id uuid.UUID, parentID uuid.UUID) *mRepositoryMockValidateParent {
	if mmValidateParent.mock.funcValidateParent != nil {
		mmValidateParent.mock.t.Fatalf("RepositoryMock.ValidateParent mock is already set by Set")
	}

	if mmValidateParent.defaultExpectation == nil {
		mmValidateParent.defaultExpectation = &RepositoryMockValidateParentExpectation{}
	}

	if mmValidateParent.defaultExpectation.paramPtrs != nil {
		mmValidateParent.mock.t.Fatalf("RepositoryMock.ValidateParent mock is already set by ExpectParams functions")
	}

	mmValidateParent.defaultExpectation.params = &RepositoryMockValidateParentParams{ctx, id, parentID}
	mmValidateParent.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmValidateParent.expectations {
		if minimock.Equal(e.params, mmValidateParent.defaultExpectation.params) {
			mmValidateParent.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmValidateParent.defaultExpectation.params)
		}
	}

	return mmValidateParent
}

// ExpectCtxParam1 sets up expected param ctx for Repository.ValidateParent
func (mmValidateParent *mRepositoryMockValidateParent) ExpectCtxParam1(ctx context.Context) *mRepositoryMockValidateParent {
	if mmValidateParent.mock.funcValidateParent != nil {
		mmValidateParent.mock.t.Fatalf("RepositoryMock.ValidateParent mock is already set by Set")
	}

	if mmValidateParent.defaultExpectation == nil {
		mmValidateParent.defaultExpectation = &RepositoryMockValidateParentExpectation{}
	}

	if mmValidateParent.defaultExpectation.params != nil {
		mmValidateParent.mock.t.Fatalf("RepositoryMock.ValidateParent mock is already set by Expect")
	}

	if mmValidateParent.defaultExpectation.paramPtrs == nil {
		mmValidateParent.defaultExpectation.paramPtrs = &RepositoryMockValidateParentParamPtrs{}
	}
	mmValidateParent.defaultExpectation.paramPtrs.ctx = &ctx
	mmValidateParent.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmValidateParent
}

// ExpectIdParam2 sets up expected param id for Repository.ValidateParent
func (mmValidateParent *mRepositoryMockValidateParent) ExpectIdParam2(id uuid.UUID) *mRepositoryMockValidateParent {
	if mmValidateParent.mock.funcValidateParent != nil {
		mmValidateParent.mock.t.Fatalf("RepositoryMock.ValidateParent mock is already set by Set")
	}

	if mmValidateParent.defaultExpectation == nil {
		mmValidateParent.defaultExpectation = &RepositoryMockValidateParentExpectation{}
	}

	if mmValidateParent.defaultExpectation.params != nil {
		mmValidateParent.mock.t.Fatalf("RepositoryMock.ValidateParent mock is already set by Expect")
	}

	if mmValidateParent.defaultExpectation.paramPtrs == nil {
		mmValidateParent.defaultExpectation.paramPtrs = &RepositoryMockValidateParentParamPtrs{}
	}
	mmValidateParent.defaultExpectation.paramPtrs.id = &id
	mmValidateParent.defaultExpectation.expectationOrigins.originId = minimock.CallerInfo(1)

	return mmValidateParent
}

// ExpectParentIDParam3 sets up expected param parentID for Repository.ValidateParent
func (mmValidateParent *mRepositoryMockValidateParent) ExpectParentIDParam3(parentID uuid.UUID) *mRepositoryMockValidateParent {
	if mmValidateParent.mock.funcValidateParent != nil {
		mmValidateParent.mock.t.Fatalf("RepositoryMock.ValidateParent mock is already set by Set")
	}

	if mmValidateParent.defaultExpectation == nil {
		mmValidateParent.defaultExpectation = &RepositoryMockValidateParentExpectation{}
	}

	if mmValidateParent.defaultExpectation.params != nil {
		mmValidateParent.mock.t.Fatalf("RepositoryMock.ValidateParent mock is already set by Expect")
	}

	if mmValidateParent.defaultExpectation.paramPtrs == nil {
		mmValidateParent.defaultExpectation.paramPtrs = &RepositoryMockValidateParentParamPtrs{}
	}
	mmValidateParent.defaultExpectation.paramPtrs.parentID = &parentID
	mmValidateParent.defaultExpectation.expectationOrigins.originParentID = minimock.CallerInfo(1)

	return mmValidateParent
}

// Inspect accepts an inspector function that has same arguments as the Repository.ValidateParent
func (mmValidateParent *mRepositoryMockValidateParent) Inspect(f func(ctx context.Context, id uuid.UUID, parentID uuid.UUID)) *mRepositoryMockValidateParent {
	if mmValidateParent.mock.inspectFuncValidateParent != nil {
		mmValidateParent.mock.t.Fatalf("Inspect function is already set for RepositoryMock.ValidateParent")
	}

	mmValidateParent.mock.inspectFuncValidateParent = f

	return mmValidateParent
}

// Return sets up results that will be returned by Repository.ValidateParent
func (mmValidateParent *mRepositoryMockValidateParent) Return(err error) *RepositoryMock {
	if mmValidateParent.mock.funcValidateParent != nil {
		mmValidateParent.mock.t.Fatalf("RepositoryMock.ValidateParent mock is already set by Set")
	}

	if mmValidateParent.defaultExpectation == nil {
		mmValidateParent.defaultExpectation = &RepositoryMockValidateParentExpectation{mock: mmValidateParent.mock}
	}
	mmValidateParent.defaultExpectation.results = &RepositoryMockValidateParentResults{err}
	mmValidateParent.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmValidateParent.mock
}

// Set uses given function f to mock the Repository.ValidateParent method
func (mmValidateParent *mRepositoryMockValidateParent) Set(f func(ctx context.Context, id uuid.UUID, parentID uuid.UUID) (err error)) *RepositoryMock {
	if mmValidateParent.defaultExpectation != nil {
		mmValidateParent.mock.t.Fatalf("Default expectation is already set for the Repository.ValidateParent method")
	}

	if len(mmValidateParent.expectations) > 0 {
		mmValidateParent.mock.t.Fatalf("Some expectations are already set for the Repository.ValidateParent method")
	}

	mmValidateParent.mock.funcValidateParent = f
	mmValidateParent.mock.funcValidateParentOrigin = minimock.CallerInfo(1)
	return mmValidateParent.mock
}

// When sets expectation for the Repository.ValidateParent which will trigger the result defined by the following
// Then helper
func (mmValidateParent *mRepositoryMockValidateParent) When(ctx context.Context, id uuid.UUID, parentID uuid.UUID) *RepositoryMockValidateParentExpectation {
	if mmValidateParent.mock.funcValidateParent != nil {
		mmValidateParent.mock.t.Fatalf("RepositoryMock.ValidateParent mock is already set by Set")
	}

	expectation := &RepositoryMockValidateParentExpectation{
		mock:               mmValidateParent.mock,
		params:             &RepositoryMockValidateParentParams{ctx, id, parentID},
		expectationOrigins: RepositoryMockValidateParentExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmValidateParent.expectations = append(mmValidateParent.expectations, expectation)
	return expectation
}

// Then sets up Repository.ValidateParent return parameters for the expectation previously defined by the When method
func (e *RepositoryMockValidateParentExpectation) Then(err error) *RepositoryMock {
	e.results = &RepositoryMockValidateParentResults{err}
	return e.mock
}

// Times sets number of times Repository.ValidateParent should be invoked
func (mmValidateParent *mRepositoryMockValidateParent) Times(n uint64) *mRepositoryMockValidateParent {
	if n == 0 {
		mmValidateParent.mock.t.Fatalf("Times of RepositoryMock.ValidateParent mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmValidateParent.expectedInvocations, n)
	mmValidateParent.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmValidateParent
}

func (mmValidateParent *mRepositoryMockValidateParent) invocationsDone() bool {
	if len(mmValidateParent.expectations) == 0 && mmValidateParent.defaultExpectation == nil && mmValidateParent.mock.funcValidateParent == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmValidateParent.mock.afterValidateParentCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmValidateParent.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ValidateParent implements mm_department.Repository
func (mmValidateParent *RepositoryMock) ValidateParent(ctx context.Context, id uuid.UUID, parentID uuid.UUID) (err error) {
	mm_atomic.AddUint64(&mmValidateParent.beforeValidateParentCounter, 1)
	defer mm_atomic.AddUint64(&mmValidateParent.afterValidateParentCounter, 1)

	mmValidateParent.t.Helper()

	if mmValidateParent.inspectFuncValidateParent != nil {
		mmValidateParent.inspectFuncValidateParent(ctx, id, parentID)
	}

	mm_params := RepositoryMockValidateParentParams{ctx, id, parentID}

	// Record call args
	mmValidateParent.ValidateParentMock.mutex.Lock()
	mmValidateParent.ValidateParentMock.callArgs = append(mmValidateParent.ValidateParentMock.callArgs, &mm_params)
	mmValidateParent.ValidateParentMock.mutex.Unlock()

	for _, e := range mmValidateParent.ValidateParentMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmValidateParent.ValidateParentMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmValidateParent.ValidateParentMock.defaultExpectation.Counter, 1)
		mm_want := mmValidateParent.ValidateParentMock.defaultExpectation.params
		mm_want_ptrs := mmValidateParent.ValidateParentMock.defaultExpectation.paramPtrs

		mm_got := RepositoryMockValidateParentParams{ctx, id, parentID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmValidateParent.t.Errorf("RepositoryMock.ValidateParent got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmValidateParent.ValidateParentMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmValidateParent.t.Errorf("RepositoryMock.ValidateParent got unexpected parameter id, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmValidateParent.ValidateParentMock.defaultExpectation.expectationOrigins.originId, *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

			if mm_want_ptrs.parentID != nil && !minimock.Equal(*mm_want_ptrs.parentID, mm_got.parentID) {
				mmValidateParent.t.Errorf("RepositoryMock.ValidateParent got unexpected parameter parentID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmValidateParent.ValidateParentMock.defaultExpectation.expectationOrigins.originParentID, *mm_want_ptrs.parentID, mm_got.parentID, minimock.Diff(*mm_want_ptrs.parentID, mm_got.parentID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmValidateParent.t.Errorf("RepositoryMock.ValidateParent got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmValidateParent.ValidateParentMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmValidateParent.ValidateParentMock.defaultExpectation.results
		if mm_results == nil {
			mmValidateParent.t.Fatal("No results are set for the RepositoryMock.ValidateParent")
		}
		return (*mm_results).err
	}
	if mmValidateParent.funcValidateParent != nil {
		return mmValidateParent.funcValidateParent(ctx, id, parentID)
	}
	mmValidateParent.t.Fatalf("Unexpected call to RepositoryMock.ValidateParent. %v %v %v", ctx, id, parentID)
	return
}

// ValidateParentAfterCounter returns a count of finished RepositoryMock.ValidateParent invocations
func (mmValidateParent *RepositoryMock) ValidateParentAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidateParent.afterValidateParentCounter)
}

// ValidateParentBeforeCounter returns a count of RepositoryMock.ValidateParent invocations
func (mmValidateParent *RepositoryMock) ValidateParentBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidateParent.beforeValidateParentCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.ValidateParent.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmValidateParent *mRepositoryMockValidateParent) Calls() []*RepositoryMockValidateParentParams {
	mmValidateParent.mutex.RLock()

	argCopy := make([]*RepositoryMockValidateParentParams, len(mmValidateParent.callArgs))
	copy(argCopy, mmValidateParent.callArgs)

	mmValidateParent.mutex.RUnlock()

	return argCopy
}

// MinimockValidateParentDone returns true if the count of the ValidateParent invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockValidateParentDone() bool {
	if m.ValidateParentMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ValidateParentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ValidateParentMock.invocationsDone()
}

// MinimockValidateParentInspect logs each unmet expectation
func (m *RepositoryMock) MinimockValidateParentInspect() {
	for _, e := range m.ValidateParentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.ValidateParent at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterValidateParentCounter := mm_atomic.LoadUint64(&m.afterValidateParentCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ValidateParentMock.defaultExpectation != nil && afterValidateParentCounter < 1 {
		if m.ValidateParentMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to RepositoryMock.ValidateParent at\n%s", m.ValidateParentMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to RepositoryMock.ValidateParent at\n%s with params: %#v", m.ValidateParentMock.defaultExpectation.expectationOrigins.origin, *m.ValidateParentMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcValidateParent != nil && afterValidateParentCounter < 1 {
		m.t.Errorf("Expected call to RepositoryMock.ValidateParent at\n%s", m.funcValidateParentOrigin)
	}

	if !m.ValidateParentMock.invocationsDone() && afterValidateParentCounter > 0 {
		m.t.Errorf("Expected %d calls to RepositoryMock.ValidateParent at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ValidateParentMock.expectedInvocations), m.ValidateParentMock.expectedInvocationsOrigin, afterValidateParentCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateInspect()

			m.MinimockDeleteInspect()

			m.MinimockListInspect()

			m.MinimockUpdateInspect()

			m.MinimockValidateParentInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockDeleteDone() &&
		m.MinimockListDone() &&
		m.MinimockUpdateDone() &&
		m.MinimockValidateParentDone()
}
